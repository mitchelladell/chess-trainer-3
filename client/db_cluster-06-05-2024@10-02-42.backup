--
-- PostgreSQL database cluster dump
--

SET default_transaction_read_only = off;

SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;

--
-- Roles
--

CREATE ROLE anon;
ALTER ROLE anon WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE authenticated;
ALTER ROLE authenticated WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE authenticator;
ALTER ROLE authenticator WITH NOSUPERUSER NOINHERIT NOCREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE dashboard_user;
ALTER ROLE dashboard_user WITH NOSUPERUSER INHERIT CREATEROLE CREATEDB NOLOGIN REPLICATION NOBYPASSRLS;
CREATE ROLE pgbouncer;
ALTER ROLE pgbouncer WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE pgsodium_keyholder;
ALTER ROLE pgsodium_keyholder WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE pgsodium_keyiduser;
ALTER ROLE pgsodium_keyiduser WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE pgsodium_keymaker;
ALTER ROLE pgsodium_keymaker WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE postgres;
ALTER ROLE postgres WITH NOSUPERUSER INHERIT CREATEROLE CREATEDB LOGIN REPLICATION BYPASSRLS;
CREATE ROLE service_role;
ALTER ROLE service_role WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION BYPASSRLS;
CREATE ROLE supabase_admin;
ALTER ROLE supabase_admin WITH SUPERUSER INHERIT CREATEROLE CREATEDB LOGIN REPLICATION BYPASSRLS;
CREATE ROLE supabase_auth_admin;
ALTER ROLE supabase_auth_admin WITH NOSUPERUSER NOINHERIT CREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE supabase_read_only_user;
ALTER ROLE supabase_read_only_user WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB LOGIN NOREPLICATION BYPASSRLS;
CREATE ROLE supabase_replication_admin;
ALTER ROLE supabase_replication_admin WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB LOGIN REPLICATION NOBYPASSRLS;
CREATE ROLE supabase_storage_admin;
ALTER ROLE supabase_storage_admin WITH NOSUPERUSER NOINHERIT CREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;

--
-- User Configurations
--

--
-- User Config "anon"
--

ALTER ROLE anon SET statement_timeout TO '3s';

--
-- User Config "authenticated"
--

ALTER ROLE authenticated SET statement_timeout TO '8s';

--
-- User Config "authenticator"
--

ALTER ROLE authenticator SET session_preload_libraries TO 'safeupdate';
ALTER ROLE authenticator SET statement_timeout TO '8s';
ALTER ROLE authenticator SET lock_timeout TO '8s';

--
-- User Config "postgres"
--

ALTER ROLE postgres SET search_path TO E'\\$user', 'public', 'extensions';

--
-- User Config "supabase_admin"
--

ALTER ROLE supabase_admin SET search_path TO '$user', 'public', 'auth', 'extensions';

--
-- User Config "supabase_auth_admin"
--

ALTER ROLE supabase_auth_admin SET search_path TO 'auth';
ALTER ROLE supabase_auth_admin SET idle_in_transaction_session_timeout TO '60000';

--
-- User Config "supabase_storage_admin"
--

ALTER ROLE supabase_storage_admin SET search_path TO 'storage';


--
-- Role memberships
--

GRANT anon TO authenticator GRANTED BY postgres;
GRANT anon TO postgres GRANTED BY supabase_admin;
GRANT authenticated TO authenticator GRANTED BY postgres;
GRANT authenticated TO postgres GRANTED BY supabase_admin;
GRANT authenticator TO supabase_storage_admin GRANTED BY supabase_admin;
GRANT pg_monitor TO postgres GRANTED BY supabase_admin;
GRANT pg_read_all_data TO supabase_read_only_user GRANTED BY postgres;
GRANT pgsodium_keyholder TO pgsodium_keymaker GRANTED BY supabase_admin;
GRANT pgsodium_keyholder TO postgres WITH ADMIN OPTION GRANTED BY supabase_admin;
GRANT pgsodium_keyholder TO service_role GRANTED BY supabase_admin;
GRANT pgsodium_keyiduser TO pgsodium_keyholder GRANTED BY supabase_admin;
GRANT pgsodium_keyiduser TO pgsodium_keymaker GRANTED BY supabase_admin;
GRANT pgsodium_keyiduser TO postgres WITH ADMIN OPTION GRANTED BY supabase_admin;
GRANT pgsodium_keymaker TO postgres WITH ADMIN OPTION GRANTED BY supabase_admin;
GRANT service_role TO authenticator GRANTED BY postgres;
GRANT service_role TO postgres GRANTED BY supabase_admin;
GRANT supabase_auth_admin TO postgres GRANTED BY supabase_admin;
GRANT supabase_storage_admin TO postgres GRANTED BY supabase_admin;






--
-- Databases
--

--
-- Database "template1" dump
--

\connect template1

--
-- PostgreSQL database dump
--

-- Dumped from database version 15.1 (Ubuntu 15.1-1.pgdg20.04+1)
-- Dumped by pg_dump version 15.6 (Debian 15.6-1.pgdg110+2)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- PostgreSQL database dump complete
--

--
-- Database "postgres" dump
--

\connect postgres

--
-- PostgreSQL database dump
--

-- Dumped from database version 15.1 (Ubuntu 15.1-1.pgdg20.04+1)
-- Dumped by pg_dump version 15.6 (Debian 15.6-1.pgdg110+2)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: auth; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA auth;


ALTER SCHEMA auth OWNER TO supabase_admin;

--
-- Name: extensions; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA extensions;


ALTER SCHEMA extensions OWNER TO postgres;

--
-- Name: graphql; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA graphql;


ALTER SCHEMA graphql OWNER TO supabase_admin;

--
-- Name: graphql_public; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA graphql_public;


ALTER SCHEMA graphql_public OWNER TO supabase_admin;

--
-- Name: pgbouncer; Type: SCHEMA; Schema: -; Owner: pgbouncer
--

CREATE SCHEMA pgbouncer;


ALTER SCHEMA pgbouncer OWNER TO pgbouncer;

--
-- Name: pgsodium; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA pgsodium;


ALTER SCHEMA pgsodium OWNER TO supabase_admin;

--
-- Name: pgsodium; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgsodium WITH SCHEMA pgsodium;


--
-- Name: EXTENSION pgsodium; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgsodium IS 'Pgsodium is a modern cryptography library for Postgres.';


--
-- Name: realtime; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA realtime;


ALTER SCHEMA realtime OWNER TO supabase_admin;

--
-- Name: storage; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA storage;


ALTER SCHEMA storage OWNER TO supabase_admin;

--
-- Name: vault; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA vault;


ALTER SCHEMA vault OWNER TO supabase_admin;

--
-- Name: pg_graphql; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pg_graphql WITH SCHEMA graphql;


--
-- Name: EXTENSION pg_graphql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pg_graphql IS 'pg_graphql: GraphQL support';


--
-- Name: pg_stat_statements; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pg_stat_statements WITH SCHEMA extensions;


--
-- Name: EXTENSION pg_stat_statements; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pg_stat_statements IS 'track planning and execution statistics of all SQL statements executed';


--
-- Name: pgcrypto; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA extensions;


--
-- Name: EXTENSION pgcrypto; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgcrypto IS 'cryptographic functions';


--
-- Name: pgjwt; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgjwt WITH SCHEMA extensions;


--
-- Name: EXTENSION pgjwt; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgjwt IS 'JSON Web Token API for Postgresql';


--
-- Name: supabase_vault; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS supabase_vault WITH SCHEMA vault;


--
-- Name: EXTENSION supabase_vault; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION supabase_vault IS 'Supabase Vault Extension';


--
-- Name: uuid-ossp; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA extensions;


--
-- Name: EXTENSION "uuid-ossp"; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION "uuid-ossp" IS 'generate universally unique identifiers (UUIDs)';


--
-- Name: aal_level; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.aal_level AS ENUM (
    'aal1',
    'aal2',
    'aal3'
);


ALTER TYPE auth.aal_level OWNER TO supabase_auth_admin;

--
-- Name: code_challenge_method; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.code_challenge_method AS ENUM (
    's256',
    'plain'
);


ALTER TYPE auth.code_challenge_method OWNER TO supabase_auth_admin;

--
-- Name: factor_status; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.factor_status AS ENUM (
    'unverified',
    'verified'
);


ALTER TYPE auth.factor_status OWNER TO supabase_auth_admin;

--
-- Name: factor_type; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.factor_type AS ENUM (
    'totp',
    'webauthn'
);


ALTER TYPE auth.factor_type OWNER TO supabase_auth_admin;

--
-- Name: coursetype; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.coursetype AS ENUM (
    'Opening',
    'Middle',
    'End',
    'Strategies',
    'Tactics',
    'SituationalPlay',
    'ChessTrap'
);


ALTER TYPE public.coursetype OWNER TO postgres;

--
-- Name: email(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.email() RETURNS text
    LANGUAGE sql STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.email', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'email')
  )::text
$$;


ALTER FUNCTION auth.email() OWNER TO supabase_auth_admin;

--
-- Name: FUNCTION email(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.email() IS 'Deprecated. Use auth.jwt() -> ''email'' instead.';


--
-- Name: jwt(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.jwt() RETURNS jsonb
    LANGUAGE sql STABLE
    AS $$
  select 
    coalesce(
        nullif(current_setting('request.jwt.claim', true), ''),
        nullif(current_setting('request.jwt.claims', true), '')
    )::jsonb
$$;


ALTER FUNCTION auth.jwt() OWNER TO supabase_auth_admin;

--
-- Name: role(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.role() RETURNS text
    LANGUAGE sql STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.role', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'role')
  )::text
$$;


ALTER FUNCTION auth.role() OWNER TO supabase_auth_admin;

--
-- Name: FUNCTION role(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.role() IS 'Deprecated. Use auth.jwt() -> ''role'' instead.';


--
-- Name: uid(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.uid() RETURNS uuid
    LANGUAGE sql STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.sub', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'sub')
  )::uuid
$$;


ALTER FUNCTION auth.uid() OWNER TO supabase_auth_admin;

--
-- Name: FUNCTION uid(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.uid() IS 'Deprecated. Use auth.jwt() -> ''sub'' instead.';


--
-- Name: grant_pg_cron_access(); Type: FUNCTION; Schema: extensions; Owner: postgres
--

CREATE FUNCTION extensions.grant_pg_cron_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF EXISTS (
    SELECT
    FROM pg_event_trigger_ddl_commands() AS ev
    JOIN pg_extension AS ext
    ON ev.objid = ext.oid
    WHERE ext.extname = 'pg_cron'
  )
  THEN
    grant usage on schema cron to postgres with grant option;

    alter default privileges in schema cron grant all on tables to postgres with grant option;
    alter default privileges in schema cron grant all on functions to postgres with grant option;
    alter default privileges in schema cron grant all on sequences to postgres with grant option;

    alter default privileges for user supabase_admin in schema cron grant all
        on sequences to postgres with grant option;
    alter default privileges for user supabase_admin in schema cron grant all
        on tables to postgres with grant option;
    alter default privileges for user supabase_admin in schema cron grant all
        on functions to postgres with grant option;

    grant all privileges on all tables in schema cron to postgres with grant option;
    revoke all on table cron.job from postgres;
    grant select on table cron.job to postgres with grant option;
  END IF;
END;
$$;


ALTER FUNCTION extensions.grant_pg_cron_access() OWNER TO postgres;

--
-- Name: FUNCTION grant_pg_cron_access(); Type: COMMENT; Schema: extensions; Owner: postgres
--

COMMENT ON FUNCTION extensions.grant_pg_cron_access() IS 'Grants access to pg_cron';


--
-- Name: grant_pg_graphql_access(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.grant_pg_graphql_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $_$
DECLARE
    func_is_graphql_resolve bool;
BEGIN
    func_is_graphql_resolve = (
        SELECT n.proname = 'resolve'
        FROM pg_event_trigger_ddl_commands() AS ev
        LEFT JOIN pg_catalog.pg_proc AS n
        ON ev.objid = n.oid
    );

    IF func_is_graphql_resolve
    THEN
        -- Update public wrapper to pass all arguments through to the pg_graphql resolve func
        DROP FUNCTION IF EXISTS graphql_public.graphql;
        create or replace function graphql_public.graphql(
            "operationName" text default null,
            query text default null,
            variables jsonb default null,
            extensions jsonb default null
        )
            returns jsonb
            language sql
        as $$
            select graphql.resolve(
                query := query,
                variables := coalesce(variables, '{}'),
                "operationName" := "operationName",
                extensions := extensions
            );
        $$;

        -- This hook executes when `graphql.resolve` is created. That is not necessarily the last
        -- function in the extension so we need to grant permissions on existing entities AND
        -- update default permissions to any others that are created after `graphql.resolve`
        grant usage on schema graphql to postgres, anon, authenticated, service_role;
        grant select on all tables in schema graphql to postgres, anon, authenticated, service_role;
        grant execute on all functions in schema graphql to postgres, anon, authenticated, service_role;
        grant all on all sequences in schema graphql to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on tables to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on functions to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on sequences to postgres, anon, authenticated, service_role;

        -- Allow postgres role to allow granting usage on graphql and graphql_public schemas to custom roles
        grant usage on schema graphql_public to postgres with grant option;
        grant usage on schema graphql to postgres with grant option;
    END IF;

END;
$_$;


ALTER FUNCTION extensions.grant_pg_graphql_access() OWNER TO supabase_admin;

--
-- Name: FUNCTION grant_pg_graphql_access(); Type: COMMENT; Schema: extensions; Owner: supabase_admin
--

COMMENT ON FUNCTION extensions.grant_pg_graphql_access() IS 'Grants access to pg_graphql';


--
-- Name: grant_pg_net_access(); Type: FUNCTION; Schema: extensions; Owner: postgres
--

CREATE FUNCTION extensions.grant_pg_net_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF EXISTS (
    SELECT 1
    FROM pg_event_trigger_ddl_commands() AS ev
    JOIN pg_extension AS ext
    ON ev.objid = ext.oid
    WHERE ext.extname = 'pg_net'
  )
  THEN
    IF NOT EXISTS (
      SELECT 1
      FROM pg_roles
      WHERE rolname = 'supabase_functions_admin'
    )
    THEN
      CREATE USER supabase_functions_admin NOINHERIT CREATEROLE LOGIN NOREPLICATION;
    END IF;

    GRANT USAGE ON SCHEMA net TO supabase_functions_admin, postgres, anon, authenticated, service_role;

    ALTER function net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) SECURITY DEFINER;
    ALTER function net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) SECURITY DEFINER;

    ALTER function net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) SET search_path = net;
    ALTER function net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) SET search_path = net;

    REVOKE ALL ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;
    REVOKE ALL ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;

    GRANT EXECUTE ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin, postgres, anon, authenticated, service_role;
    GRANT EXECUTE ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin, postgres, anon, authenticated, service_role;
  END IF;
END;
$$;


ALTER FUNCTION extensions.grant_pg_net_access() OWNER TO postgres;

--
-- Name: FUNCTION grant_pg_net_access(); Type: COMMENT; Schema: extensions; Owner: postgres
--

COMMENT ON FUNCTION extensions.grant_pg_net_access() IS 'Grants access to pg_net';


--
-- Name: pgrst_ddl_watch(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.pgrst_ddl_watch() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  cmd record;
BEGIN
  FOR cmd IN SELECT * FROM pg_event_trigger_ddl_commands()
  LOOP
    IF cmd.command_tag IN (
      'CREATE SCHEMA', 'ALTER SCHEMA'
    , 'CREATE TABLE', 'CREATE TABLE AS', 'SELECT INTO', 'ALTER TABLE'
    , 'CREATE FOREIGN TABLE', 'ALTER FOREIGN TABLE'
    , 'CREATE VIEW', 'ALTER VIEW'
    , 'CREATE MATERIALIZED VIEW', 'ALTER MATERIALIZED VIEW'
    , 'CREATE FUNCTION', 'ALTER FUNCTION'
    , 'CREATE TRIGGER'
    , 'CREATE TYPE', 'ALTER TYPE'
    , 'CREATE RULE'
    , 'COMMENT'
    )
    -- don't notify in case of CREATE TEMP table or other objects created on pg_temp
    AND cmd.schema_name is distinct from 'pg_temp'
    THEN
      NOTIFY pgrst, 'reload schema';
    END IF;
  END LOOP;
END; $$;


ALTER FUNCTION extensions.pgrst_ddl_watch() OWNER TO supabase_admin;

--
-- Name: pgrst_drop_watch(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.pgrst_drop_watch() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  obj record;
BEGIN
  FOR obj IN SELECT * FROM pg_event_trigger_dropped_objects()
  LOOP
    IF obj.object_type IN (
      'schema'
    , 'table'
    , 'foreign table'
    , 'view'
    , 'materialized view'
    , 'function'
    , 'trigger'
    , 'type'
    , 'rule'
    )
    AND obj.is_temporary IS false -- no pg_temp objects
    THEN
      NOTIFY pgrst, 'reload schema';
    END IF;
  END LOOP;
END; $$;


ALTER FUNCTION extensions.pgrst_drop_watch() OWNER TO supabase_admin;

--
-- Name: set_graphql_placeholder(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.set_graphql_placeholder() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $_$
    DECLARE
    graphql_is_dropped bool;
    BEGIN
    graphql_is_dropped = (
        SELECT ev.schema_name = 'graphql_public'
        FROM pg_event_trigger_dropped_objects() AS ev
        WHERE ev.schema_name = 'graphql_public'
    );

    IF graphql_is_dropped
    THEN
        create or replace function graphql_public.graphql(
            "operationName" text default null,
            query text default null,
            variables jsonb default null,
            extensions jsonb default null
        )
            returns jsonb
            language plpgsql
        as $$
            DECLARE
                server_version float;
            BEGIN
                server_version = (SELECT (SPLIT_PART((select version()), ' ', 2))::float);

                IF server_version >= 14 THEN
                    RETURN jsonb_build_object(
                        'errors', jsonb_build_array(
                            jsonb_build_object(
                                'message', 'pg_graphql extension is not enabled.'
                            )
                        )
                    );
                ELSE
                    RETURN jsonb_build_object(
                        'errors', jsonb_build_array(
                            jsonb_build_object(
                                'message', 'pg_graphql is only available on projects running Postgres 14 onwards.'
                            )
                        )
                    );
                END IF;
            END;
        $$;
    END IF;

    END;
$_$;


ALTER FUNCTION extensions.set_graphql_placeholder() OWNER TO supabase_admin;

--
-- Name: FUNCTION set_graphql_placeholder(); Type: COMMENT; Schema: extensions; Owner: supabase_admin
--

COMMENT ON FUNCTION extensions.set_graphql_placeholder() IS 'Reintroduces placeholder function for graphql_public.graphql';


--
-- Name: get_auth(text); Type: FUNCTION; Schema: pgbouncer; Owner: postgres
--

CREATE FUNCTION pgbouncer.get_auth(p_usename text) RETURNS TABLE(username text, password text)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    RAISE WARNING 'PgBouncer auth request: %', p_usename;

    RETURN QUERY
    SELECT usename::TEXT, passwd::TEXT FROM pg_catalog.pg_shadow
    WHERE usename = p_usename;
END;
$$;


ALTER FUNCTION pgbouncer.get_auth(p_usename text) OWNER TO postgres;

--
-- Name: can_insert_object(text, text, uuid, jsonb); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.can_insert_object(bucketid text, name text, owner uuid, metadata jsonb) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  INSERT INTO "storage"."objects" ("bucket_id", "name", "owner", "metadata") VALUES (bucketid, name, owner, metadata);
  -- hack to rollback the successful insert
  RAISE sqlstate 'PT200' using
  message = 'ROLLBACK',
  detail = 'rollback successful insert';
END
$$;


ALTER FUNCTION storage.can_insert_object(bucketid text, name text, owner uuid, metadata jsonb) OWNER TO supabase_storage_admin;

--
-- Name: extension(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.extension(name text) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
_filename text;
BEGIN
    select string_to_array(name, '/') into _parts;
    select _parts[array_length(_parts,1)] into _filename;
    -- @todo return the last part instead of 2
    return split_part(_filename, '.', 2);
END
$$;


ALTER FUNCTION storage.extension(name text) OWNER TO supabase_storage_admin;

--
-- Name: filename(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.filename(name text) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
BEGIN
    select string_to_array(name, '/') into _parts;
    return _parts[array_length(_parts,1)];
END
$$;


ALTER FUNCTION storage.filename(name text) OWNER TO supabase_storage_admin;

--
-- Name: foldername(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.foldername(name text) RETURNS text[]
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
BEGIN
    select string_to_array(name, '/') into _parts;
    return _parts[1:array_length(_parts,1)-1];
END
$$;


ALTER FUNCTION storage.foldername(name text) OWNER TO supabase_storage_admin;

--
-- Name: get_size_by_bucket(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.get_size_by_bucket() RETURNS TABLE(size bigint, bucket_id text)
    LANGUAGE plpgsql
    AS $$
BEGIN
    return query
        select sum((metadata->>'size')::int) as size, obj.bucket_id
        from "storage".objects as obj
        group by obj.bucket_id;
END
$$;


ALTER FUNCTION storage.get_size_by_bucket() OWNER TO supabase_storage_admin;

--
-- Name: search(text, text, integer, integer, integer, text, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.search(prefix text, bucketname text, limits integer DEFAULT 100, levels integer DEFAULT 1, offsets integer DEFAULT 0, search text DEFAULT ''::text, sortcolumn text DEFAULT 'name'::text, sortorder text DEFAULT 'asc'::text) RETURNS TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)
    LANGUAGE plpgsql STABLE
    AS $_$
declare
  v_order_by text;
  v_sort_order text;
begin
  case
    when sortcolumn = 'name' then
      v_order_by = 'name';
    when sortcolumn = 'updated_at' then
      v_order_by = 'updated_at';
    when sortcolumn = 'created_at' then
      v_order_by = 'created_at';
    when sortcolumn = 'last_accessed_at' then
      v_order_by = 'last_accessed_at';
    else
      v_order_by = 'name';
  end case;

  case
    when sortorder = 'asc' then
      v_sort_order = 'asc';
    when sortorder = 'desc' then
      v_sort_order = 'desc';
    else
      v_sort_order = 'asc';
  end case;

  v_order_by = v_order_by || ' ' || v_sort_order;

  return query execute
    'with folders as (
       select path_tokens[$1] as folder
       from storage.objects
         where objects.name ilike $2 || $3 || ''%''
           and bucket_id = $4
           and array_length(regexp_split_to_array(objects.name, ''/''), 1) <> $1
       group by folder
       order by folder ' || v_sort_order || '
     )
     (select folder as "name",
            null as id,
            null as updated_at,
            null as created_at,
            null as last_accessed_at,
            null as metadata from folders)
     union all
     (select path_tokens[$1] as "name",
            id,
            updated_at,
            created_at,
            last_accessed_at,
            metadata
     from storage.objects
     where objects.name ilike $2 || $3 || ''%''
       and bucket_id = $4
       and array_length(regexp_split_to_array(objects.name, ''/''), 1) = $1
     order by ' || v_order_by || ')
     limit $5
     offset $6' using levels, prefix, search, bucketname, limits, offsets;
end;
$_$;


ALTER FUNCTION storage.search(prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text) OWNER TO supabase_storage_admin;

--
-- Name: update_updated_at_column(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.update_updated_at_column() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW; 
END;
$$;


ALTER FUNCTION storage.update_updated_at_column() OWNER TO supabase_storage_admin;

--
-- Name: secrets_encrypt_secret_secret(); Type: FUNCTION; Schema: vault; Owner: supabase_admin
--

CREATE FUNCTION vault.secrets_encrypt_secret_secret() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
		BEGIN
		        new.secret = CASE WHEN new.secret IS NULL THEN NULL ELSE
			CASE WHEN new.key_id IS NULL THEN NULL ELSE pg_catalog.encode(
			  pgsodium.crypto_aead_det_encrypt(
				pg_catalog.convert_to(new.secret, 'utf8'),
				pg_catalog.convert_to((new.id::text || new.description::text || new.created_at::text || new.updated_at::text)::text, 'utf8'),
				new.key_id::uuid,
				new.nonce
			  ),
				'base64') END END;
		RETURN new;
		END;
		$$;


ALTER FUNCTION vault.secrets_encrypt_secret_secret() OWNER TO supabase_admin;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: audit_log_entries; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.audit_log_entries (
    instance_id uuid,
    id uuid NOT NULL,
    payload json,
    created_at timestamp with time zone,
    ip_address character varying(64) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE auth.audit_log_entries OWNER TO supabase_auth_admin;

--
-- Name: TABLE audit_log_entries; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.audit_log_entries IS 'Auth: Audit trail for user actions.';


--
-- Name: flow_state; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.flow_state (
    id uuid NOT NULL,
    user_id uuid,
    auth_code text NOT NULL,
    code_challenge_method auth.code_challenge_method NOT NULL,
    code_challenge text NOT NULL,
    provider_type text NOT NULL,
    provider_access_token text,
    provider_refresh_token text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    authentication_method text NOT NULL,
    auth_code_issued_at timestamp with time zone
);


ALTER TABLE auth.flow_state OWNER TO supabase_auth_admin;

--
-- Name: TABLE flow_state; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.flow_state IS 'stores metadata for pkce logins';


--
-- Name: identities; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.identities (
    provider_id text NOT NULL,
    user_id uuid NOT NULL,
    identity_data jsonb NOT NULL,
    provider text NOT NULL,
    last_sign_in_at timestamp with time zone,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    email text GENERATED ALWAYS AS (lower((identity_data ->> 'email'::text))) STORED,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE auth.identities OWNER TO supabase_auth_admin;

--
-- Name: TABLE identities; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.identities IS 'Auth: Stores identities associated to a user.';


--
-- Name: COLUMN identities.email; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.identities.email IS 'Auth: Email is a generated column that references the optional email property in the identity_data';


--
-- Name: instances; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.instances (
    id uuid NOT NULL,
    uuid uuid,
    raw_base_config text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone
);


ALTER TABLE auth.instances OWNER TO supabase_auth_admin;

--
-- Name: TABLE instances; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.instances IS 'Auth: Manages users across multiple sites.';


--
-- Name: mfa_amr_claims; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_amr_claims (
    session_id uuid NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    authentication_method text NOT NULL,
    id uuid NOT NULL
);


ALTER TABLE auth.mfa_amr_claims OWNER TO supabase_auth_admin;

--
-- Name: TABLE mfa_amr_claims; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_amr_claims IS 'auth: stores authenticator method reference claims for multi factor authentication';


--
-- Name: mfa_challenges; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_challenges (
    id uuid NOT NULL,
    factor_id uuid NOT NULL,
    created_at timestamp with time zone NOT NULL,
    verified_at timestamp with time zone,
    ip_address inet NOT NULL
);


ALTER TABLE auth.mfa_challenges OWNER TO supabase_auth_admin;

--
-- Name: TABLE mfa_challenges; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_challenges IS 'auth: stores metadata about challenge requests made';


--
-- Name: mfa_factors; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_factors (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    friendly_name text,
    factor_type auth.factor_type NOT NULL,
    status auth.factor_status NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    secret text
);


ALTER TABLE auth.mfa_factors OWNER TO supabase_auth_admin;

--
-- Name: TABLE mfa_factors; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_factors IS 'auth: stores metadata about factors';


--
-- Name: refresh_tokens; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.refresh_tokens (
    instance_id uuid,
    id bigint NOT NULL,
    token character varying(255),
    user_id character varying(255),
    revoked boolean,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    parent character varying(255),
    session_id uuid
);


ALTER TABLE auth.refresh_tokens OWNER TO supabase_auth_admin;

--
-- Name: TABLE refresh_tokens; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.refresh_tokens IS 'Auth: Store of tokens used to refresh JWT tokens once they expire.';


--
-- Name: refresh_tokens_id_seq; Type: SEQUENCE; Schema: auth; Owner: supabase_auth_admin
--

CREATE SEQUENCE auth.refresh_tokens_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE auth.refresh_tokens_id_seq OWNER TO supabase_auth_admin;

--
-- Name: refresh_tokens_id_seq; Type: SEQUENCE OWNED BY; Schema: auth; Owner: supabase_auth_admin
--

ALTER SEQUENCE auth.refresh_tokens_id_seq OWNED BY auth.refresh_tokens.id;


--
-- Name: saml_providers; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.saml_providers (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    entity_id text NOT NULL,
    metadata_xml text NOT NULL,
    metadata_url text,
    attribute_mapping jsonb,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    name_id_format text,
    CONSTRAINT "entity_id not empty" CHECK ((char_length(entity_id) > 0)),
    CONSTRAINT "metadata_url not empty" CHECK (((metadata_url = NULL::text) OR (char_length(metadata_url) > 0))),
    CONSTRAINT "metadata_xml not empty" CHECK ((char_length(metadata_xml) > 0))
);


ALTER TABLE auth.saml_providers OWNER TO supabase_auth_admin;

--
-- Name: TABLE saml_providers; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.saml_providers IS 'Auth: Manages SAML Identity Provider connections.';


--
-- Name: saml_relay_states; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.saml_relay_states (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    request_id text NOT NULL,
    for_email text,
    redirect_to text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    flow_state_id uuid,
    CONSTRAINT "request_id not empty" CHECK ((char_length(request_id) > 0))
);


ALTER TABLE auth.saml_relay_states OWNER TO supabase_auth_admin;

--
-- Name: TABLE saml_relay_states; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.saml_relay_states IS 'Auth: Contains SAML Relay State information for each Service Provider initiated login.';


--
-- Name: schema_migrations; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.schema_migrations (
    version character varying(255) NOT NULL
);


ALTER TABLE auth.schema_migrations OWNER TO supabase_auth_admin;

--
-- Name: TABLE schema_migrations; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.schema_migrations IS 'Auth: Manages updates to the auth system.';


--
-- Name: sessions; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sessions (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    factor_id uuid,
    aal auth.aal_level,
    not_after timestamp with time zone,
    refreshed_at timestamp without time zone,
    user_agent text,
    ip inet,
    tag text
);


ALTER TABLE auth.sessions OWNER TO supabase_auth_admin;

--
-- Name: TABLE sessions; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sessions IS 'Auth: Stores session data associated to a user.';


--
-- Name: COLUMN sessions.not_after; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.sessions.not_after IS 'Auth: Not after is a nullable column that contains a timestamp after which the session should be regarded as expired.';


--
-- Name: sso_domains; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sso_domains (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    domain text NOT NULL,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    CONSTRAINT "domain not empty" CHECK ((char_length(domain) > 0))
);


ALTER TABLE auth.sso_domains OWNER TO supabase_auth_admin;

--
-- Name: TABLE sso_domains; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sso_domains IS 'Auth: Manages SSO email address domain mapping to an SSO Identity Provider.';


--
-- Name: sso_providers; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sso_providers (
    id uuid NOT NULL,
    resource_id text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    CONSTRAINT "resource_id not empty" CHECK (((resource_id = NULL::text) OR (char_length(resource_id) > 0)))
);


ALTER TABLE auth.sso_providers OWNER TO supabase_auth_admin;

--
-- Name: TABLE sso_providers; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sso_providers IS 'Auth: Manages SSO identity provider information; see saml_providers for SAML.';


--
-- Name: COLUMN sso_providers.resource_id; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.sso_providers.resource_id IS 'Auth: Uniquely identifies a SSO provider according to a user-chosen resource ID (case insensitive), useful in infrastructure as code.';


--
-- Name: users; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.users (
    instance_id uuid,
    id uuid NOT NULL,
    aud character varying(255),
    role character varying(255),
    email character varying(255),
    encrypted_password character varying(255),
    email_confirmed_at timestamp with time zone,
    invited_at timestamp with time zone,
    confirmation_token character varying(255),
    confirmation_sent_at timestamp with time zone,
    recovery_token character varying(255),
    recovery_sent_at timestamp with time zone,
    email_change_token_new character varying(255),
    email_change character varying(255),
    email_change_sent_at timestamp with time zone,
    last_sign_in_at timestamp with time zone,
    raw_app_meta_data jsonb,
    raw_user_meta_data jsonb,
    is_super_admin boolean,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    phone text DEFAULT NULL::character varying,
    phone_confirmed_at timestamp with time zone,
    phone_change text DEFAULT ''::character varying,
    phone_change_token character varying(255) DEFAULT ''::character varying,
    phone_change_sent_at timestamp with time zone,
    confirmed_at timestamp with time zone GENERATED ALWAYS AS (LEAST(email_confirmed_at, phone_confirmed_at)) STORED,
    email_change_token_current character varying(255) DEFAULT ''::character varying,
    email_change_confirm_status smallint DEFAULT 0,
    banned_until timestamp with time zone,
    reauthentication_token character varying(255) DEFAULT ''::character varying,
    reauthentication_sent_at timestamp with time zone,
    is_sso_user boolean DEFAULT false NOT NULL,
    deleted_at timestamp with time zone,
    is_anonymous boolean DEFAULT false NOT NULL,
    CONSTRAINT users_email_change_confirm_status_check CHECK (((email_change_confirm_status >= 0) AND (email_change_confirm_status <= 2)))
);


ALTER TABLE auth.users OWNER TO supabase_auth_admin;

--
-- Name: TABLE users; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.users IS 'Auth: Stores user login data within a secure schema.';


--
-- Name: COLUMN users.is_sso_user; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.users.is_sso_user IS 'Auth: Set this column to true when the account comes from SSO. These accounts can have duplicate emails.';


--
-- Name: chapters; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.chapters (
    id integer NOT NULL,
    title text,
    pgn text,
    youtubeurl text,
    imageurl text,
    index integer,
    perspective boolean,
    course integer NOT NULL
);


ALTER TABLE public.chapters OWNER TO postgres;

--
-- Name: chapters_course_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.chapters_course_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.chapters_course_seq OWNER TO postgres;

--
-- Name: chapters_course_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.chapters_course_seq OWNED BY public.chapters.course;


--
-- Name: chapters_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.chapters_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.chapters_id_seq OWNER TO postgres;

--
-- Name: chapters_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.chapters_id_seq OWNED BY public.chapters.id;


--
-- Name: contributions; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.contributions (
    user_ uuid NOT NULL,
    course integer NOT NULL
);


ALTER TABLE public.contributions OWNER TO postgres;

--
-- Name: contributions_course_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.contributions_course_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.contributions_course_seq OWNER TO postgres;

--
-- Name: contributions_course_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.contributions_course_seq OWNED BY public.contributions.course;


--
-- Name: courses; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.courses (
    id integer NOT NULL,
    name text,
    language text,
    description text,
    type public.coursetype,
    duration integer,
    contenttype text,
    price integer,
    videoavailable boolean,
    levelnew boolean,
    levelbeginner boolean,
    levelmiddle boolean,
    leveladvanced boolean,
    author uuid NOT NULL,
    authorname text
);


ALTER TABLE public.courses OWNER TO postgres;

--
-- Name: courses_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.courses_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.courses_id_seq OWNER TO postgres;

--
-- Name: courses_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.courses_id_seq OWNED BY public.courses.id;


--
-- Name: followers; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.followers (
    follower uuid NOT NULL,
    following uuid NOT NULL
);


ALTER TABLE public.followers OWNER TO postgres;

--
-- Name: participations; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.participations (
    id uuid NOT NULL,
    finished boolean,
    chapter integer NOT NULL,
    user_ uuid NOT NULL
);


ALTER TABLE public.participations OWNER TO postgres;

--
-- Name: participations_chapter_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.participations_chapter_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.participations_chapter_seq OWNER TO postgres;

--
-- Name: participations_chapter_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.participations_chapter_seq OWNED BY public.participations.chapter;


--
-- Name: profiles; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.profiles (
    id uuid NOT NULL,
    username text,
    phonenumber text,
    paymentdetails text,
    userlevel integer,
    profilevisibility boolean,
    coursevisibility boolean
);


ALTER TABLE public.profiles OWNER TO postgres;

--
-- Name: purchases; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.purchases (
    id integer NOT NULL,
    boughtat timestamp without time zone,
    user_ uuid NOT NULL,
    course integer NOT NULL
);


ALTER TABLE public.purchases OWNER TO postgres;

--
-- Name: purchases_course_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.purchases_course_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.purchases_course_seq OWNER TO postgres;

--
-- Name: purchases_course_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.purchases_course_seq OWNED BY public.purchases.course;


--
-- Name: purchases_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.purchases_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.purchases_id_seq OWNER TO postgres;

--
-- Name: purchases_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.purchases_id_seq OWNED BY public.purchases.id;


--
-- Name: wishes; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.wishes (
    wisher uuid NOT NULL,
    wish integer NOT NULL
);


ALTER TABLE public.wishes OWNER TO postgres;

--
-- Name: wishes_wish_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.wishes_wish_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.wishes_wish_seq OWNER TO postgres;

--
-- Name: wishes_wish_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.wishes_wish_seq OWNED BY public.wishes.wish;


--
-- Name: buckets; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.buckets (
    id text NOT NULL,
    name text NOT NULL,
    owner uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    public boolean DEFAULT false,
    avif_autodetection boolean DEFAULT false,
    file_size_limit bigint,
    allowed_mime_types text[],
    owner_id text
);


ALTER TABLE storage.buckets OWNER TO supabase_storage_admin;

--
-- Name: COLUMN buckets.owner; Type: COMMENT; Schema: storage; Owner: supabase_storage_admin
--

COMMENT ON COLUMN storage.buckets.owner IS 'Field is deprecated, use owner_id instead';


--
-- Name: migrations; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.migrations (
    id integer NOT NULL,
    name character varying(100) NOT NULL,
    hash character varying(40) NOT NULL,
    executed_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE storage.migrations OWNER TO supabase_storage_admin;

--
-- Name: objects; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.objects (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    bucket_id text,
    name text,
    owner uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    last_accessed_at timestamp with time zone DEFAULT now(),
    metadata jsonb,
    path_tokens text[] GENERATED ALWAYS AS (string_to_array(name, '/'::text)) STORED,
    version text,
    owner_id text
);


ALTER TABLE storage.objects OWNER TO supabase_storage_admin;

--
-- Name: COLUMN objects.owner; Type: COMMENT; Schema: storage; Owner: supabase_storage_admin
--

COMMENT ON COLUMN storage.objects.owner IS 'Field is deprecated, use owner_id instead';


--
-- Name: decrypted_secrets; Type: VIEW; Schema: vault; Owner: supabase_admin
--

CREATE VIEW vault.decrypted_secrets AS
 SELECT secrets.id,
    secrets.name,
    secrets.description,
    secrets.secret,
        CASE
            WHEN (secrets.secret IS NULL) THEN NULL::text
            ELSE
            CASE
                WHEN (secrets.key_id IS NULL) THEN NULL::text
                ELSE convert_from(pgsodium.crypto_aead_det_decrypt(decode(secrets.secret, 'base64'::text), convert_to(((((secrets.id)::text || secrets.description) || (secrets.created_at)::text) || (secrets.updated_at)::text), 'utf8'::name), secrets.key_id, secrets.nonce), 'utf8'::name)
            END
        END AS decrypted_secret,
    secrets.key_id,
    secrets.nonce,
    secrets.created_at,
    secrets.updated_at
   FROM vault.secrets;


ALTER TABLE vault.decrypted_secrets OWNER TO supabase_admin;

--
-- Name: refresh_tokens id; Type: DEFAULT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens ALTER COLUMN id SET DEFAULT nextval('auth.refresh_tokens_id_seq'::regclass);


--
-- Name: chapters id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.chapters ALTER COLUMN id SET DEFAULT nextval('public.chapters_id_seq'::regclass);


--
-- Name: chapters course; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.chapters ALTER COLUMN course SET DEFAULT nextval('public.chapters_course_seq'::regclass);


--
-- Name: contributions course; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.contributions ALTER COLUMN course SET DEFAULT nextval('public.contributions_course_seq'::regclass);


--
-- Name: courses id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.courses ALTER COLUMN id SET DEFAULT nextval('public.courses_id_seq'::regclass);


--
-- Name: participations chapter; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.participations ALTER COLUMN chapter SET DEFAULT nextval('public.participations_chapter_seq'::regclass);


--
-- Name: purchases id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.purchases ALTER COLUMN id SET DEFAULT nextval('public.purchases_id_seq'::regclass);


--
-- Name: purchases course; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.purchases ALTER COLUMN course SET DEFAULT nextval('public.purchases_course_seq'::regclass);


--
-- Name: wishes wish; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.wishes ALTER COLUMN wish SET DEFAULT nextval('public.wishes_wish_seq'::regclass);


--
-- Data for Name: audit_log_entries; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.audit_log_entries (instance_id, id, payload, created_at, ip_address) FROM stdin;
00000000-0000-0000-0000-000000000000	c8cf7168-3a04-4d99-a38f-1ae0a0e9e7ef	{"action":"user_signedup","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"admin@admin.com","user_id":"4e5dafb6-ddbf-47fa-ae08-2e2e37312f8a","user_phone":""}}	2024-01-21 14:08:16.805726+00	
00000000-0000-0000-0000-000000000000	6313e30e-6b7a-460b-9c99-d345e70db41b	{"action":"user_confirmation_requested","actor_id":"cbfa1c2d-9e16-4858-8549-4636a7a7eabc","actor_username":"carucel666@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2024-01-22 07:51:59.379724+00	
00000000-0000-0000-0000-000000000000	4f5629d7-50c4-45cd-b495-a9fed0cfb248	{"action":"user_signedup","actor_id":"cbfa1c2d-9e16-4858-8549-4636a7a7eabc","actor_username":"carucel666@gmail.com","actor_via_sso":false,"log_type":"team"}	2024-01-22 07:52:45.041486+00	
00000000-0000-0000-0000-000000000000	064a14b4-1db2-497f-b43d-5b585b637636	{"action":"user_repeated_signup","actor_id":"cbfa1c2d-9e16-4858-8549-4636a7a7eabc","actor_username":"carucel666@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2024-01-22 07:52:45.74391+00	
00000000-0000-0000-0000-000000000000	4310025e-08c6-480e-8935-0db037156e8d	{"action":"user_repeated_signup","actor_id":"cbfa1c2d-9e16-4858-8549-4636a7a7eabc","actor_username":"carucel666@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2024-01-22 07:52:45.756005+00	
00000000-0000-0000-0000-000000000000	d2a8d8c4-3d6d-4f0e-89e0-b2841fe9959e	{"action":"user_repeated_signup","actor_id":"cbfa1c2d-9e16-4858-8549-4636a7a7eabc","actor_username":"carucel666@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2024-01-22 07:56:18.118097+00	
00000000-0000-0000-0000-000000000000	dc0b23d8-3f50-4851-9053-48c65396c6de	{"action":"user_repeated_signup","actor_id":"cbfa1c2d-9e16-4858-8549-4636a7a7eabc","actor_username":"carucel666@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2024-01-22 07:56:18.123271+00	
00000000-0000-0000-0000-000000000000	72da31c0-1cf3-40ec-a645-659fc6beb108	{"action":"user_repeated_signup","actor_id":"cbfa1c2d-9e16-4858-8549-4636a7a7eabc","actor_username":"carucel666@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2024-01-22 08:07:48.44579+00	
00000000-0000-0000-0000-000000000000	0843500f-3877-478d-a4c7-091b64c48bb9	{"action":"user_confirmation_requested","actor_id":"8e47d4c5-0f93-4e6b-ae9c-0741a6fb244b","actor_username":"jomoga8666@namewok.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2024-02-04 16:38:03.437469+00	
00000000-0000-0000-0000-000000000000	1d59cf78-9f95-40d5-8a7d-0f3fcec57b33	{"action":"user_confirmation_requested","actor_id":"8e47d4c5-0f93-4e6b-ae9c-0741a6fb244b","actor_username":"jomoga8666@namewok.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2024-02-04 16:41:24.452693+00	
00000000-0000-0000-0000-000000000000	1abfaf9c-5a44-4ca7-a7e1-d045acc3f5ab	{"action":"user_signedup","actor_id":"8e47d4c5-0f93-4e6b-ae9c-0741a6fb244b","actor_username":"jomoga8666@namewok.com","actor_via_sso":false,"log_type":"team"}	2024-02-04 16:42:26.854894+00	
00000000-0000-0000-0000-000000000000	7da85ec8-ecec-4cda-8752-9e310d19ec33	{"action":"login","actor_id":"8e47d4c5-0f93-4e6b-ae9c-0741a6fb244b","actor_username":"jomoga8666@namewok.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-04 16:43:11.549059+00	
00000000-0000-0000-0000-000000000000	0c98d685-015d-4485-ba6f-72ac08ccea18	{"action":"token_refreshed","actor_id":"8e47d4c5-0f93-4e6b-ae9c-0741a6fb244b","actor_username":"jomoga8666@namewok.com","actor_via_sso":false,"log_type":"token"}	2024-02-04 18:36:29.760636+00	
00000000-0000-0000-0000-000000000000	1f8ae56a-aceb-4294-837c-a1bcf8a159c0	{"action":"token_revoked","actor_id":"8e47d4c5-0f93-4e6b-ae9c-0741a6fb244b","actor_username":"jomoga8666@namewok.com","actor_via_sso":false,"log_type":"token"}	2024-02-04 18:36:29.761365+00	
00000000-0000-0000-0000-000000000000	76b88e18-cf10-4216-96ea-8c35f285b3f0	{"action":"user_confirmation_requested","actor_id":"c23bbe03-2286-40c2-96b0-08e49e5e1328","actor_username":"bob@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2024-02-04 18:36:37.669066+00	
00000000-0000-0000-0000-000000000000	e230a957-229c-4b35-b61b-70a160643316	{"action":"user_confirmation_requested","actor_id":"eae05d32-6348-4cea-b1c7-2111e9cc7c5a","actor_username":"mitchelladel11@gmail.co","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2024-02-05 21:09:22.136485+00	
00000000-0000-0000-0000-000000000000	367b845a-3731-4e54-9399-00cf12ef895b	{"action":"user_confirmation_requested","actor_id":"4426720c-d1c1-40f4-81f1-774649e743c6","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2024-02-05 21:10:07.538075+00	
00000000-0000-0000-0000-000000000000	837ca8be-1f71-48da-9748-c88ba9d573f8	{"action":"user_signedup","actor_id":"4426720c-d1c1-40f4-81f1-774649e743c6","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"team"}	2024-02-05 21:11:34.504568+00	
00000000-0000-0000-0000-000000000000	a0b29eea-7917-4a8a-a27e-abc48d25392f	{"action":"login","actor_id":"4426720c-d1c1-40f4-81f1-774649e743c6","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-05 21:12:48.760055+00	
00000000-0000-0000-0000-000000000000	83363e36-039a-4b6a-a607-4bfaa72db638	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"mitchelladel11@gmail.com","user_id":"4426720c-d1c1-40f4-81f1-774649e743c6","user_phone":""}}	2024-02-05 22:50:47.766808+00	
00000000-0000-0000-0000-000000000000	ccd73c2a-8deb-4693-862d-74a74783702c	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"mitchelladel11@gmail.co","user_id":"eae05d32-6348-4cea-b1c7-2111e9cc7c5a","user_phone":""}}	2024-02-05 22:50:54.567704+00	
00000000-0000-0000-0000-000000000000	9ecb0956-84af-4492-ac9e-e56f4a4f7eb1	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"bob@gmail.com","user_id":"c23bbe03-2286-40c2-96b0-08e49e5e1328","user_phone":""}}	2024-02-05 22:50:59.610094+00	
00000000-0000-0000-0000-000000000000	0728442c-8069-417d-990d-53fd68467094	{"action":"user_confirmation_requested","actor_id":"10763968-8be7-42a2-861d-7c9af7c34e9f","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2024-02-05 22:52:22.529086+00	
00000000-0000-0000-0000-000000000000	16d4e583-54be-4bdb-a69d-b694dff15494	{"action":"user_signedup","actor_id":"10763968-8be7-42a2-861d-7c9af7c34e9f","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"team"}	2024-02-05 22:53:31.44089+00	
00000000-0000-0000-0000-000000000000	9f3952b1-ceba-4dc5-99fa-ecd7e5e870ee	{"action":"login","actor_id":"10763968-8be7-42a2-861d-7c9af7c34e9f","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-05 22:53:38.820704+00	
00000000-0000-0000-0000-000000000000	091e2ea3-6fac-42b1-acf7-8baa89076d70	{"action":"login","actor_id":"10763968-8be7-42a2-861d-7c9af7c34e9f","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-05 22:59:52.835805+00	
00000000-0000-0000-0000-000000000000	ea6f35e0-db0f-45c1-a6f7-bc4065d27712	{"action":"login","actor_id":"10763968-8be7-42a2-861d-7c9af7c34e9f","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-05 22:59:56.247181+00	
00000000-0000-0000-0000-000000000000	58ab9132-a804-4a8c-ab86-608d9eb22ce8	{"action":"token_refreshed","actor_id":"10763968-8be7-42a2-861d-7c9af7c34e9f","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-06 08:20:19.87579+00	
00000000-0000-0000-0000-000000000000	8ba07c03-961b-40a4-bc05-00488f10c8f6	{"action":"token_revoked","actor_id":"10763968-8be7-42a2-861d-7c9af7c34e9f","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-06 08:20:19.876524+00	
00000000-0000-0000-0000-000000000000	4ed0bcc3-d070-4241-8cd9-79f640275708	{"action":"login","actor_id":"10763968-8be7-42a2-861d-7c9af7c34e9f","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-06 19:08:27.093597+00	
00000000-0000-0000-0000-000000000000	7d253e51-53f7-4dd3-9261-afbcef4feb0e	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"mitchelladel11@gmail.com","user_id":"10763968-8be7-42a2-861d-7c9af7c34e9f","user_phone":""}}	2024-02-06 19:34:35.937753+00	
00000000-0000-0000-0000-000000000000	56e00893-b439-457a-a650-631cf946a59c	{"action":"user_confirmation_requested","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2024-02-06 19:35:03.768939+00	
00000000-0000-0000-0000-000000000000	69a6b6ed-eae4-40a6-8947-59df8f5f46c7	{"action":"user_signedup","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"team"}	2024-02-06 19:36:45.587344+00	
00000000-0000-0000-0000-000000000000	3a66d595-3ac4-432e-9a44-a83c6c106cdc	{"action":"login","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-06 19:37:09.479028+00	
00000000-0000-0000-0000-000000000000	d1dd32cf-9efe-4091-a26e-bcc269a46464	{"action":"login","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-06 19:40:26.469805+00	
00000000-0000-0000-0000-000000000000	2737cba1-ad59-4e23-9db9-f47c3c3acf53	{"action":"login","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-06 19:43:02.228073+00	
00000000-0000-0000-0000-000000000000	955299a9-4102-4a0d-8a36-35858fb4e2e2	{"action":"login","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-06 19:46:02.666842+00	
00000000-0000-0000-0000-000000000000	1c87ef81-04aa-44af-99ed-56455313cfc2	{"action":"login","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-06 19:46:24.848015+00	
00000000-0000-0000-0000-000000000000	0970a7d9-9ba0-44e3-8f88-476d12015f8e	{"action":"login","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-06 19:46:43.536493+00	
00000000-0000-0000-0000-000000000000	b0f049d1-6cce-439e-a3ea-9ce7e2aaa45d	{"action":"login","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-06 19:46:48.35629+00	
00000000-0000-0000-0000-000000000000	9e16381a-78a2-4b0e-95fc-ef56a11b48a3	{"action":"login","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-06 19:46:58.615135+00	
00000000-0000-0000-0000-000000000000	ca552854-3840-493c-9b97-d5f79829b847	{"action":"logout","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-02-06 19:48:37.15825+00	
00000000-0000-0000-0000-000000000000	6a2d8f64-25fe-4e4c-a208-bd904fe3dd0e	{"action":"login","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-06 19:49:18.563849+00	
00000000-0000-0000-0000-000000000000	7cff9187-dc89-4023-bd86-38fe48bbb133	{"action":"login","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-06 19:49:33.670099+00	
00000000-0000-0000-0000-000000000000	f451f59f-d7a6-48fd-8db2-ade790649814	{"action":"logout","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-02-06 19:50:22.518517+00	
00000000-0000-0000-0000-000000000000	db592157-b098-4dac-a2db-2ec138f5b454	{"action":"login","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-06 19:50:30.965582+00	
00000000-0000-0000-0000-000000000000	529a54d7-7bc8-4d45-ad0b-359fc3ce86cd	{"action":"login","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-06 19:51:28.772094+00	
00000000-0000-0000-0000-000000000000	7c1153f8-e092-47a2-a6f5-fae346105b63	{"action":"logout","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-02-06 19:53:44.823572+00	
00000000-0000-0000-0000-000000000000	d0e787db-1e5c-4291-aac9-f11ceea83317	{"action":"login","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-06 19:55:17.774833+00	
00000000-0000-0000-0000-000000000000	082eaa9f-02ab-49f4-8a28-a500d0b0942c	{"action":"logout","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-02-06 19:55:23.506938+00	
00000000-0000-0000-0000-000000000000	ca2c438c-4f42-43a6-80c0-91b6cea56293	{"action":"login","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-06 19:59:14.438674+00	
00000000-0000-0000-0000-000000000000	5cdba09a-bcb4-4846-8609-d1682cfece89	{"action":"logout","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-02-06 19:59:17.136436+00	
00000000-0000-0000-0000-000000000000	b4da5ba3-dd58-4d83-baf9-896280027269	{"action":"login","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-06 19:59:52.317931+00	
00000000-0000-0000-0000-000000000000	52bf1ec8-0b2b-4b76-bae8-f853a77149e9	{"action":"logout","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-02-06 19:59:54.589428+00	
00000000-0000-0000-0000-000000000000	a9fc19f2-5bf2-41af-a90e-5b7283fe8e47	{"action":"login","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-06 20:29:47.591781+00	
00000000-0000-0000-0000-000000000000	90e63c4b-f896-4174-b288-53f98be1850d	{"action":"logout","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-02-06 20:32:00.833676+00	
00000000-0000-0000-0000-000000000000	a7dcbd61-60f0-487b-bdac-3828c12179b3	{"action":"login","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-06 20:32:09.829227+00	
00000000-0000-0000-0000-000000000000	58d74b0b-2a0b-4e66-834b-a65b7fac3834	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-06 23:41:27.909254+00	
00000000-0000-0000-0000-000000000000	f612bead-055e-47e0-aafb-27796096522d	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-06 23:41:27.909807+00	
00000000-0000-0000-0000-000000000000	773733f7-8b38-4c33-9ca6-9bd1de991874	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-07 16:39:08.035734+00	
00000000-0000-0000-0000-000000000000	4cae8320-1466-40d5-bce6-99c97fac4342	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-07 16:39:08.036505+00	
00000000-0000-0000-0000-000000000000	46d299e9-aa7a-45fb-a0d3-ec69ebc79ecd	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-07 17:37:07.01817+00	
00000000-0000-0000-0000-000000000000	a1b2a9ae-2b4a-401d-905a-7b80dc78201d	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-07 17:37:07.018884+00	
00000000-0000-0000-0000-000000000000	53a43925-0bf9-4adb-a05f-bafd5d0533c7	{"action":"logout","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-02-07 17:53:32.401281+00	
00000000-0000-0000-0000-000000000000	09b7881f-ac2e-45db-afdd-511ad8f4e94d	{"action":"login","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-07 17:54:00.926274+00	
00000000-0000-0000-0000-000000000000	d774976e-aade-496f-a215-b18feb44a4d2	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-07 18:58:54.157087+00	
00000000-0000-0000-0000-000000000000	2842bf39-758e-4e65-b35c-16eac611c088	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-07 18:58:54.157782+00	
00000000-0000-0000-0000-000000000000	6b293590-1424-4b19-a0fb-5217f98c25c5	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-07 19:58:17.846146+00	
00000000-0000-0000-0000-000000000000	58c1f748-45c6-43c3-88f7-b7593eb134ff	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-07 19:58:17.846728+00	
00000000-0000-0000-0000-000000000000	abcf018c-32a2-4248-b1ad-078b09ae347d	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-07 20:56:22.027566+00	
00000000-0000-0000-0000-000000000000	a371adb8-3483-47ee-b67c-71e5780b1c70	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-07 20:56:22.02817+00	
00000000-0000-0000-0000-000000000000	3e272f12-8ba1-4f76-a27f-e626f83eaae2	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-07 21:59:25.960965+00	
00000000-0000-0000-0000-000000000000	046d9afc-5d22-41ad-97e7-5f13c3826838	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-07 21:59:25.961646+00	
00000000-0000-0000-0000-000000000000	79248a3b-246b-4316-8d26-0cbd5f9f6cc6	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-07 23:14:36.369916+00	
00000000-0000-0000-0000-000000000000	71c504de-bf25-45e3-9abf-aee25fff295b	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-07 23:14:36.370573+00	
00000000-0000-0000-0000-000000000000	2c2164b9-6856-4eff-9602-f0ecb0425a1d	{"action":"logout","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-02-07 23:33:55.951804+00	
00000000-0000-0000-0000-000000000000	adba4162-464a-4bdc-a806-e5578d42258b	{"action":"login","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-07 23:34:38.269299+00	
00000000-0000-0000-0000-000000000000	4c34e604-7ee4-40a3-bf22-059db781285b	{"action":"login","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-07 23:37:16.345989+00	
00000000-0000-0000-0000-000000000000	63746e34-ccd5-4c07-991e-0f21aceb34c0	{"action":"logout","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-02-07 23:40:42.286648+00	
00000000-0000-0000-0000-000000000000	c7b3fdd6-d00d-4008-bc97-5fd2082cda76	{"action":"login","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-07 23:41:06.681689+00	
00000000-0000-0000-0000-000000000000	428f0665-40ff-46c9-bf5a-a57a7fe76c7a	{"action":"logout","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-02-07 23:45:00.584441+00	
00000000-0000-0000-0000-000000000000	956ebcbf-1bce-4e2e-b83b-f8fbb3fd9eda	{"action":"login","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-07 23:45:15.67298+00	
00000000-0000-0000-0000-000000000000	6d74d818-fad7-4337-bbb4-1f3580d5b31e	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-08 08:23:13.607839+00	
00000000-0000-0000-0000-000000000000	875094ff-12f6-4f40-9466-253d860c88c2	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-08 08:23:13.608473+00	
00000000-0000-0000-0000-000000000000	b7ced042-e005-4f81-ae49-9f363625f42b	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-08 09:21:38.732095+00	
00000000-0000-0000-0000-000000000000	44f71112-6a8b-48dc-b6bb-e000d6c2da77	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-08 09:21:38.732731+00	
00000000-0000-0000-0000-000000000000	4e3e46da-221b-4c16-b569-ba826077000c	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-08 12:47:28.616578+00	
00000000-0000-0000-0000-000000000000	bac8c30b-2223-42b2-ac60-a8c24ad41d5e	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-08 12:47:28.617188+00	
00000000-0000-0000-0000-000000000000	0f9f70e0-9d5b-4e26-90ba-e402a780ec84	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-08 14:49:13.657824+00	
00000000-0000-0000-0000-000000000000	723b1425-9d31-45d6-87f7-9727ab6ca4c2	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-08 14:49:13.658435+00	
00000000-0000-0000-0000-000000000000	7052334a-e64f-4cc0-8305-904a2b91918c	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-08 18:21:24.191753+00	
00000000-0000-0000-0000-000000000000	095f0263-62d5-41a5-8278-8cf62ad63b71	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-08 18:21:24.192408+00	
00000000-0000-0000-0000-000000000000	0f457f2c-77a0-4984-9664-7528dde4677c	{"action":"logout","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-02-08 18:24:28.632596+00	
00000000-0000-0000-0000-000000000000	b9dfd771-1dd3-4d44-b24f-be709d43b656	{"action":"login","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-08 18:35:29.608751+00	
00000000-0000-0000-0000-000000000000	064dd637-7f80-455f-a93f-2c6847ab9995	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-08 21:38:46.304403+00	
00000000-0000-0000-0000-000000000000	3eb83b79-b1d3-402c-b322-0753b160b2b8	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-08 21:38:46.304961+00	
00000000-0000-0000-0000-000000000000	b38460bc-cae3-4e88-87fc-e701b8a31541	{"action":"logout","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-02-08 21:40:55.172693+00	
00000000-0000-0000-0000-000000000000	6907f018-ad4b-4195-8774-f9b580fd7dbc	{"action":"login","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-08 21:41:39.129695+00	
00000000-0000-0000-0000-000000000000	55c073d1-ae55-4af4-9533-ba733661e449	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-08 23:02:22.915593+00	
00000000-0000-0000-0000-000000000000	ba6a8482-861f-4bb6-be39-a119b11fb68c	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-08 23:02:22.916228+00	
00000000-0000-0000-0000-000000000000	1a1d440d-0d1b-4861-a10c-e8016a95c345	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-09 08:13:33.644864+00	
00000000-0000-0000-0000-000000000000	6cdced36-102d-412f-bb24-01c206e44e7a	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-09 08:13:33.64548+00	
00000000-0000-0000-0000-000000000000	28bef16c-659a-445c-a4c9-19f2ce1eb3b6	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-09 14:05:09.721088+00	
00000000-0000-0000-0000-000000000000	229bec96-d7eb-4d7b-892c-97e2bcb5aba9	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-09 14:05:09.721723+00	
00000000-0000-0000-0000-000000000000	ef69b8d9-911c-4fd2-8a6b-b0f95fa434c6	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-09 15:07:15.59072+00	
00000000-0000-0000-0000-000000000000	cae8a59c-8cd4-40ed-a48d-2e589a566146	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-09 15:07:15.591382+00	
00000000-0000-0000-0000-000000000000	00739d48-7f0a-407d-a39f-fcdd743174d9	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-10 14:01:51.554916+00	
00000000-0000-0000-0000-000000000000	cd9da31f-09d5-4942-bdc7-303f718648ee	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-10 14:01:51.55557+00	
00000000-0000-0000-0000-000000000000	66f262e6-87ea-4536-a701-fb521ac0dd96	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-10 22:15:30.927864+00	
00000000-0000-0000-0000-000000000000	ad09a6d5-8c85-44f6-ada5-e17710311c7a	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-10 22:15:30.928633+00	
00000000-0000-0000-0000-000000000000	750f059d-bda9-49f3-b751-a640f136b5d8	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-10 23:23:14.165313+00	
00000000-0000-0000-0000-000000000000	33fa7f9b-94ee-4121-9f83-7c1c79cd75db	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-10 23:23:14.165961+00	
00000000-0000-0000-0000-000000000000	f68e5006-c914-4868-af49-22dade29b4d9	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-11 21:17:47.163204+00	
00000000-0000-0000-0000-000000000000	96daf52e-3c78-4ed5-ba80-a91f9ccf99bd	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-11 21:17:47.163762+00	
00000000-0000-0000-0000-000000000000	f35ea9ba-f52c-4fa5-8588-ad4094ab6a30	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-12 19:52:29.946551+00	
00000000-0000-0000-0000-000000000000	b0fa65c8-4130-414c-b86f-3feda6cde69a	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-12 19:52:29.947255+00	
00000000-0000-0000-0000-000000000000	e8d59461-726d-46b3-83ec-4ebe1f1a047b	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-12 21:39:58.253019+00	
00000000-0000-0000-0000-000000000000	6cc95289-163b-436d-8167-d8336c9c1611	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-12 21:39:58.253642+00	
00000000-0000-0000-0000-000000000000	d01e310f-7926-47f8-a0e7-fd4858241f5d	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-13 08:06:42.937041+00	
00000000-0000-0000-0000-000000000000	e960f84a-d1e7-4c86-9a7a-f9817a53d138	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-13 08:06:42.93765+00	
00000000-0000-0000-0000-000000000000	ee6028cd-2f03-4e4d-a957-3aaa6880496b	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-13 09:12:22.3634+00	
00000000-0000-0000-0000-000000000000	1e7df768-f006-494e-9246-30f65e898d01	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-13 09:12:22.364821+00	
00000000-0000-0000-0000-000000000000	e084f1e9-2509-43e2-a72f-99bcc04693fa	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-13 17:39:43.393024+00	
00000000-0000-0000-0000-000000000000	c41105e6-d42b-4cd0-8a9e-bc7b28b1e2a8	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-13 17:39:43.393666+00	
00000000-0000-0000-0000-000000000000	2a16c876-d1d6-45c4-8daf-93e7ed559968	{"action":"logout","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-02-13 17:44:02.248168+00	
00000000-0000-0000-0000-000000000000	d67ac15e-6cc5-4a42-98f8-76853b63b209	{"action":"login","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-13 17:44:25.04978+00	
00000000-0000-0000-0000-000000000000	de954d19-a65a-4827-91be-0a961881a977	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-13 18:43:16.766358+00	
00000000-0000-0000-0000-000000000000	d98c63c6-3a0a-4704-bdda-223e4426e0fa	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-13 18:43:16.767099+00	
00000000-0000-0000-0000-000000000000	07dafde3-3b33-4bcc-9d32-ce33383ba8dd	{"action":"logout","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-02-13 18:52:31.441514+00	
00000000-0000-0000-0000-000000000000	208c44fd-ad07-4a4f-8533-a176a406c408	{"action":"login","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-13 18:53:34.549097+00	
00000000-0000-0000-0000-000000000000	509f29fe-24df-4cbb-a9b5-4d225af90276	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-13 19:52:11.834996+00	
00000000-0000-0000-0000-000000000000	72f36768-6dc6-4822-b773-2f145156fa1a	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-13 19:52:11.835583+00	
00000000-0000-0000-0000-000000000000	a0820b64-7eb9-4eb0-a796-f512d7ac9413	{"action":"login","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-13 20:05:57.938328+00	
00000000-0000-0000-0000-000000000000	936f50e8-bfd2-495f-9fad-3b17f868ae7f	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-13 21:09:36.19046+00	
00000000-0000-0000-0000-000000000000	50ba1f90-587a-4f6f-acc9-b9ec4666799d	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-13 21:09:36.191095+00	
00000000-0000-0000-0000-000000000000	8742f271-01f0-4ed9-9451-42011993506d	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-14 08:08:03.257594+00	
00000000-0000-0000-0000-000000000000	09091ac6-0a7d-424b-8db5-173296104e30	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-14 08:08:03.25831+00	
00000000-0000-0000-0000-000000000000	b94c2a84-2e29-4bd3-8114-190fde9b1913	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-14 10:00:51.178525+00	
00000000-0000-0000-0000-000000000000	618c4895-ea4b-460d-ac9d-29458d4a2910	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-14 10:00:51.179223+00	
00000000-0000-0000-0000-000000000000	b922455f-f272-43ce-977d-1d71024fafc9	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-17 22:23:51.368595+00	
00000000-0000-0000-0000-000000000000	b59733c5-2e75-4f32-a1c4-9eef0a5e2200	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-17 22:23:51.371998+00	
00000000-0000-0000-0000-000000000000	58f0ac29-13cb-4a39-8e39-dfe274ba4689	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-17 22:23:51.605534+00	
00000000-0000-0000-0000-000000000000	a61f0c5a-68e3-41a9-9011-e0451974fc4d	{"action":"login","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-17 22:25:20.969279+00	
00000000-0000-0000-0000-000000000000	95522f03-0219-4369-bb3f-54b5115ccaf3	{"action":"login","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-17 22:25:30.499268+00	
00000000-0000-0000-0000-000000000000	ed6a39d9-ee1f-42c6-a88e-168b53f8a484	{"action":"logout","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-02-17 22:27:50.653496+00	
00000000-0000-0000-0000-000000000000	5c90aed5-1710-4c02-9740-a4bb7cd43819	{"action":"logout","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-02-17 22:28:02.426987+00	
00000000-0000-0000-0000-000000000000	5b9598ec-1db8-4aa4-9ce4-cf805e1bdc4c	{"action":"login","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-17 22:29:18.458367+00	
00000000-0000-0000-0000-000000000000	b79719e8-6188-4acf-a736-1f2ef67f702f	{"action":"user_confirmation_requested","actor_id":"fd5eccd1-2685-4a1f-9736-7d212d0f226b","actor_username":"yahyabarghash8@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2024-02-17 22:29:23.454112+00	
00000000-0000-0000-0000-000000000000	da783488-bd24-4963-aa96-f2625dd40b5f	{"action":"logout","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-02-17 22:29:25.05692+00	
00000000-0000-0000-0000-000000000000	0b740a23-1c92-416e-96dd-ad9d00b8df97	{"action":"user_signedup","actor_id":"fd5eccd1-2685-4a1f-9736-7d212d0f226b","actor_username":"yahyabarghash8@gmail.com","actor_via_sso":false,"log_type":"team"}	2024-02-17 22:33:10.157239+00	
00000000-0000-0000-0000-000000000000	8ad96315-cda9-4be3-8688-8bb2c1b0d810	{"action":"login","actor_id":"fd5eccd1-2685-4a1f-9736-7d212d0f226b","actor_username":"yahyabarghash8@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-17 22:34:10.972611+00	
00000000-0000-0000-0000-000000000000	a184cd67-ecda-42a4-8140-528be518c469	{"action":"login","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-17 22:36:25.117726+00	
00000000-0000-0000-0000-000000000000	16c2e435-f330-42a4-9f6d-8b3b7a6dfa20	{"action":"logout","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-02-17 22:37:29.156455+00	
00000000-0000-0000-0000-000000000000	38d29249-8192-4a9c-a975-7bdf7d1dbee5	{"action":"login","actor_id":"fd5eccd1-2685-4a1f-9736-7d212d0f226b","actor_username":"yahyabarghash8@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-17 22:38:34.888621+00	
00000000-0000-0000-0000-000000000000	4e374df9-9f89-4a41-a749-3983dae34709	{"action":"token_refreshed","actor_id":"fd5eccd1-2685-4a1f-9736-7d212d0f226b","actor_username":"yahyabarghash8@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-18 00:05:40.626552+00	
00000000-0000-0000-0000-000000000000	593fdb86-36a4-4e37-8498-da46659eb91c	{"action":"token_revoked","actor_id":"fd5eccd1-2685-4a1f-9736-7d212d0f226b","actor_username":"yahyabarghash8@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-18 00:05:40.628264+00	
00000000-0000-0000-0000-000000000000	dd43bc42-54e0-49c2-8a4a-444b8388a62f	{"action":"token_refreshed","actor_id":"fd5eccd1-2685-4a1f-9736-7d212d0f226b","actor_username":"yahyabarghash8@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-18 15:29:56.376556+00	
00000000-0000-0000-0000-000000000000	4b25fbec-178e-46e8-96a9-ec5653d1d9f4	{"action":"token_revoked","actor_id":"fd5eccd1-2685-4a1f-9736-7d212d0f226b","actor_username":"yahyabarghash8@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-18 15:29:56.378276+00	
00000000-0000-0000-0000-000000000000	3a6dc780-b755-49b0-b357-17538627d204	{"action":"token_refreshed","actor_id":"fd5eccd1-2685-4a1f-9736-7d212d0f226b","actor_username":"yahyabarghash8@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-18 16:28:28.292052+00	
00000000-0000-0000-0000-000000000000	413f7ffd-854f-4ad3-9ef1-38c539374b51	{"action":"token_revoked","actor_id":"fd5eccd1-2685-4a1f-9736-7d212d0f226b","actor_username":"yahyabarghash8@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-18 16:28:28.293496+00	
00000000-0000-0000-0000-000000000000	947fa91b-1ca6-46ba-9e51-201818159bab	{"action":"logout","actor_id":"fd5eccd1-2685-4a1f-9736-7d212d0f226b","actor_username":"yahyabarghash8@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-02-18 17:15:14.376025+00	
00000000-0000-0000-0000-000000000000	e5f7adbf-57d0-4ff4-a867-5e5d1af8e54f	{"action":"login","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-18 17:16:13.453399+00	
00000000-0000-0000-0000-000000000000	7f35a4bd-5b0f-4296-8b4e-7fdc5f23cc8b	{"action":"logout","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-02-18 17:16:16.9923+00	
00000000-0000-0000-0000-000000000000	41098c39-6035-4d75-9b54-c9640001ed96	{"action":"login","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-18 17:16:32.33256+00	
00000000-0000-0000-0000-000000000000	07430d38-92f0-47da-9c65-4bedda5ca619	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-18 18:39:54.364473+00	
00000000-0000-0000-0000-000000000000	3d7a3219-d29f-4507-b777-ae556abf281a	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-18 18:39:54.365951+00	
00000000-0000-0000-0000-000000000000	3e3f51cc-8ecd-485a-9025-dbeb73c69fb2	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-18 19:38:17.363929+00	
00000000-0000-0000-0000-000000000000	27f31ddb-c2c8-4a9e-a9a7-a0e0f600c2d4	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-18 19:38:17.365594+00	
00000000-0000-0000-0000-000000000000	22893ac0-cbdd-4c20-8ef3-8be4cbfd030d	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-18 21:40:54.016256+00	
00000000-0000-0000-0000-000000000000	2ffe734b-9a48-425d-a525-d716a0fe3746	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-18 21:40:54.016999+00	
00000000-0000-0000-0000-000000000000	afe659ba-86ee-4c30-bc47-d1c70124f411	{"action":"logout","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-02-18 21:41:00.574908+00	
00000000-0000-0000-0000-000000000000	5a024fb8-0bd6-44a2-8338-c8593a302c6c	{"action":"login","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-18 21:45:19.721642+00	
00000000-0000-0000-0000-000000000000	26b30f55-a69a-4064-9f04-340fdcfdb721	{"action":"logout","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-02-18 21:58:35.442107+00	
00000000-0000-0000-0000-000000000000	cbb5f11d-a04e-4d5e-abfb-47983f1b6fc4	{"action":"login","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-20 18:17:16.346687+00	
00000000-0000-0000-0000-000000000000	84c2c807-5a2f-42dd-9dc6-c75a1f9c7a5e	{"action":"logout","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-02-20 18:18:56.282847+00	
00000000-0000-0000-0000-000000000000	f50fde01-1923-40d2-92d2-9c0a19a65293	{"action":"login","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-20 18:19:13.500073+00	
00000000-0000-0000-0000-000000000000	cd53ff31-d91e-46be-a1ef-94f86daf0b28	{"action":"logout","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-02-20 18:20:40.782771+00	
00000000-0000-0000-0000-000000000000	d1ac0830-59ce-4bbb-92d0-27ce798f6504	{"action":"login","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-20 18:20:47.008526+00	
00000000-0000-0000-0000-000000000000	8a4734e3-14ad-44f7-ad39-1012abae232d	{"action":"logout","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-02-20 18:21:20.238897+00	
00000000-0000-0000-0000-000000000000	74990042-3a53-4b06-bf74-a7c97bde4c4e	{"action":"login","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-20 18:21:26.481291+00	
00000000-0000-0000-0000-000000000000	3ba3f076-db0a-4f5a-b45e-3c55c4d12ba1	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-20 19:20:23.458038+00	
00000000-0000-0000-0000-000000000000	f4f180d4-3b41-4d0f-9f22-591be9ce315a	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-20 19:20:23.460974+00	
00000000-0000-0000-0000-000000000000	3bc4b1ab-a062-4bb7-9e28-1f44c416b1e8	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-20 20:18:51.779795+00	
00000000-0000-0000-0000-000000000000	c6d64a8d-a279-47cb-a52a-aef746ae3641	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-20 20:18:51.781893+00	
00000000-0000-0000-0000-000000000000	7ea3f4c4-4286-4c41-9199-af350ad4ee1d	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-20 21:16:55.022041+00	
00000000-0000-0000-0000-000000000000	e2f2b39f-679a-4bb5-a982-0d494609228e	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-20 21:16:55.024499+00	
00000000-0000-0000-0000-000000000000	1976c8ed-f208-4308-a795-d56ef58f4534	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-20 22:54:50.384395+00	
00000000-0000-0000-0000-000000000000	509e0ec3-61d9-4470-9f63-8fb057e5bbaf	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-20 22:54:50.385789+00	
00000000-0000-0000-0000-000000000000	c0f574f1-e4a1-4a49-b752-4a89df0a9560	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-21 08:17:13.791586+00	
00000000-0000-0000-0000-000000000000	27582822-26b2-422a-aa63-8f2d69029d67	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-21 08:17:13.795288+00	
00000000-0000-0000-0000-000000000000	99f1a053-ba7f-4e0c-a7fd-5dad4a466df5	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-21 09:45:28.473789+00	
00000000-0000-0000-0000-000000000000	4998db3a-f913-4cd9-9df3-bf4ffdf2f6b9	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-21 09:45:28.476133+00	
00000000-0000-0000-0000-000000000000	90337628-0485-4f10-828b-816c85d8992b	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-21 10:48:57.811372+00	
00000000-0000-0000-0000-000000000000	e9dab1d6-64e3-4fe6-82e1-7f6eda720d0b	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-21 10:48:57.81263+00	
00000000-0000-0000-0000-000000000000	cb2dd310-3639-48aa-aa45-3ca68efefaf2	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-21 11:50:52.992203+00	
00000000-0000-0000-0000-000000000000	c78277bc-7129-4757-a788-f27cc1bb5da9	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-21 11:50:52.993599+00	
00000000-0000-0000-0000-000000000000	38cb3df0-4d06-433a-a382-41311a6b204d	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-21 20:48:50.893699+00	
00000000-0000-0000-0000-000000000000	2c3b9411-b272-49a5-bcf6-186a2ece6bed	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-21 20:48:50.89496+00	
00000000-0000-0000-0000-000000000000	fda8d0d6-83d1-468f-a3c6-edbaaea3d8a1	{"action":"logout","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-02-21 20:50:28.942878+00	
00000000-0000-0000-0000-000000000000	4edf742e-bda0-4f4f-b878-2e860d24db3a	{"action":"login","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-21 20:50:37.50262+00	
00000000-0000-0000-0000-000000000000	251bb38e-d564-48fa-a332-a240f619982a	{"action":"logout","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-02-21 20:53:03.434718+00	
00000000-0000-0000-0000-000000000000	b5bf5ae7-285d-4348-a113-0bbe78e6e54e	{"action":"login","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-21 20:53:11.247759+00	
00000000-0000-0000-0000-000000000000	62182f3f-6dbd-45f6-9f1c-7ffb85396a7e	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-22 13:49:17.677032+00	
00000000-0000-0000-0000-000000000000	ac4bca2e-5c6e-4260-a905-80bb67a20a1d	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-22 13:49:17.679538+00	
00000000-0000-0000-0000-000000000000	c9d9d230-a623-4640-ad89-453cf2f7d244	{"action":"login","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-25 13:42:53.273504+00	
00000000-0000-0000-0000-000000000000	dbe1e890-795f-4234-b5ea-c1dac67d2ef1	{"action":"logout","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-02-25 13:43:13.46767+00	
00000000-0000-0000-0000-000000000000	095e2870-f746-41d2-95ef-21a456996a3c	{"action":"login","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-25 13:43:55.145687+00	
00000000-0000-0000-0000-000000000000	f9f16f2a-d883-4323-826c-18676446a4b1	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-25 15:09:22.032896+00	
00000000-0000-0000-0000-000000000000	3be102c0-78ac-43c5-85a9-3b3a06cf8eb2	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-25 15:09:22.03616+00	
00000000-0000-0000-0000-000000000000	0365141a-ed99-449b-87e5-0528f5cf4a01	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-26 08:02:43.355679+00	
00000000-0000-0000-0000-000000000000	8fe6419c-6782-4ed0-a067-069983dfe67e	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-26 08:02:43.356904+00	
00000000-0000-0000-0000-000000000000	80560c98-a99d-444a-b518-4db0e3f2a172	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-27 00:08:16.642352+00	
00000000-0000-0000-0000-000000000000	7cdc113f-e92c-4658-b32b-2c329f712491	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-02-27 00:08:16.644627+00	
00000000-0000-0000-0000-000000000000	e09cb5f7-9b12-4e1a-9eb2-6714d86ef63a	{"action":"logout","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account"}	2024-02-27 00:09:38.170954+00	
00000000-0000-0000-0000-000000000000	2ce6592b-51bd-42d1-8c51-62acdaac00ea	{"action":"login","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-02-27 00:20:48.448541+00	
00000000-0000-0000-0000-000000000000	1f72a66d-8868-4f4c-ac4f-41df738bb90e	{"action":"login","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2024-03-20 15:26:07.213101+00	
00000000-0000-0000-0000-000000000000	6504b70b-4f1a-44b3-affb-13e1c7e83e6b	{"action":"token_refreshed","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-03-20 16:46:54.192564+00	
00000000-0000-0000-0000-000000000000	95309761-b55b-4cdd-937f-62fe65de0dcc	{"action":"token_revoked","actor_id":"68476dfe-f65f-4b33-96fb-378917fbff0a","actor_username":"mitchelladel11@gmail.com","actor_via_sso":false,"log_type":"token"}	2024-03-20 16:46:54.193202+00	
\.


--
-- Data for Name: flow_state; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.flow_state (id, user_id, auth_code, code_challenge_method, code_challenge, provider_type, provider_access_token, provider_refresh_token, created_at, updated_at, authentication_method, auth_code_issued_at) FROM stdin;
\.


--
-- Data for Name: identities; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.identities (provider_id, user_id, identity_data, provider, last_sign_in_at, created_at, updated_at, id) FROM stdin;
4e5dafb6-ddbf-47fa-ae08-2e2e37312f8a	4e5dafb6-ddbf-47fa-ae08-2e2e37312f8a	{"sub": "4e5dafb6-ddbf-47fa-ae08-2e2e37312f8a", "email": "admin@admin.com", "email_verified": false, "phone_verified": false}	email	2024-01-21 14:08:16.804598+00	2024-01-21 14:08:16.804656+00	2024-01-21 14:08:16.804656+00	57bb9b88-7913-4b6c-b2a8-fc34014be68d
cbfa1c2d-9e16-4858-8549-4636a7a7eabc	cbfa1c2d-9e16-4858-8549-4636a7a7eabc	{"sub": "cbfa1c2d-9e16-4858-8549-4636a7a7eabc", "email": "carucel666@gmail.com", "email_verified": false, "phone_verified": false}	email	2024-01-22 07:51:59.377425+00	2024-01-22 07:51:59.377475+00	2024-01-22 07:51:59.377475+00	f9e19aa1-24ff-4634-8782-0873e2ba430d
8e47d4c5-0f93-4e6b-ae9c-0741a6fb244b	8e47d4c5-0f93-4e6b-ae9c-0741a6fb244b	{"sub": "8e47d4c5-0f93-4e6b-ae9c-0741a6fb244b", "email": "jomoga8666@namewok.com", "email_verified": false, "phone_verified": false}	email	2024-02-04 16:38:03.436376+00	2024-02-04 16:38:03.436424+00	2024-02-04 16:38:03.436424+00	b6dfdd75-77d3-42f9-98ec-80662841f9f9
68476dfe-f65f-4b33-96fb-378917fbff0a	68476dfe-f65f-4b33-96fb-378917fbff0a	{"sub": "68476dfe-f65f-4b33-96fb-378917fbff0a", "email": "mitchelladel11@gmail.com", "email_verified": false, "phone_verified": false}	email	2024-02-06 19:35:03.768069+00	2024-02-06 19:35:03.768118+00	2024-02-06 19:35:03.768118+00	6e8ba73a-d399-4871-89d5-1b0ecd9cd057
fd5eccd1-2685-4a1f-9736-7d212d0f226b	fd5eccd1-2685-4a1f-9736-7d212d0f226b	{"sub": "fd5eccd1-2685-4a1f-9736-7d212d0f226b", "email": "yahyabarghash8@gmail.com", "email_verified": false, "phone_verified": false}	email	2024-02-17 22:29:23.450795+00	2024-02-17 22:29:23.450852+00	2024-02-17 22:29:23.450852+00	62e270e3-e0ce-4fd8-923f-855693ff6ba3
\.


--
-- Data for Name: instances; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.instances (id, uuid, raw_base_config, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: mfa_amr_claims; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_amr_claims (session_id, created_at, updated_at, authentication_method, id) FROM stdin;
0a4a9b7d-ad5b-4e89-beb5-8d530629847e	2024-01-22 07:52:45.050693+00	2024-01-22 07:52:45.050693+00	otp	facebb55-9577-4023-a0d2-9226929ee10f
70eb7fca-cc0b-4633-afae-43378b2496dc	2024-02-04 16:42:26.85975+00	2024-02-04 16:42:26.85975+00	otp	f10d9b68-01a6-4652-97ed-20f7ff66e8ff
ac7e66c8-b4af-4447-8579-316304758d5f	2024-02-04 16:43:11.55192+00	2024-02-04 16:43:11.55192+00	password	882ac739-fefb-4550-aeac-a4ff7f127dd7
d7887977-2a7a-4b21-9e58-466873c91a98	2024-02-27 00:20:48.454276+00	2024-02-27 00:20:48.454276+00	password	4a62ceaa-0bc2-44e4-b1ab-fe27d4365526
480a9e87-4081-470f-a4ca-58f77256042b	2024-03-20 15:26:07.22944+00	2024-03-20 15:26:07.22944+00	password	ebf56c10-dde0-4ad4-b466-53559c0051de
\.


--
-- Data for Name: mfa_challenges; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_challenges (id, factor_id, created_at, verified_at, ip_address) FROM stdin;
\.


--
-- Data for Name: mfa_factors; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_factors (id, user_id, friendly_name, factor_type, status, created_at, updated_at, secret) FROM stdin;
\.


--
-- Data for Name: refresh_tokens; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.refresh_tokens (instance_id, id, token, user_id, revoked, created_at, updated_at, parent, session_id) FROM stdin;
00000000-0000-0000-0000-000000000000	1	4EPbGEk_LHAx4T22nI8Fxw	cbfa1c2d-9e16-4858-8549-4636a7a7eabc	f	2024-01-22 07:52:45.046369+00	2024-01-22 07:52:45.046369+00	\N	0a4a9b7d-ad5b-4e89-beb5-8d530629847e
00000000-0000-0000-0000-000000000000	2	bpdW81fz0u-My_I-OWqdSQ	8e47d4c5-0f93-4e6b-ae9c-0741a6fb244b	f	2024-02-04 16:42:26.857623+00	2024-02-04 16:42:26.857623+00	\N	70eb7fca-cc0b-4633-afae-43378b2496dc
00000000-0000-0000-0000-000000000000	111	YHQ_j4rBuYKHVQtswkytZg	68476dfe-f65f-4b33-96fb-378917fbff0a	f	2024-02-27 00:20:48.452868+00	2024-02-27 00:20:48.452868+00	\N	d7887977-2a7a-4b21-9e58-466873c91a98
00000000-0000-0000-0000-000000000000	3	ov8Y3b1QgH6A_ni9_bF9hg	8e47d4c5-0f93-4e6b-ae9c-0741a6fb244b	t	2024-02-04 16:43:11.550703+00	2024-02-04 18:36:29.761874+00	\N	ac7e66c8-b4af-4447-8579-316304758d5f
00000000-0000-0000-0000-000000000000	4	IgZQEVpR6DIiFi_-SV9H3w	8e47d4c5-0f93-4e6b-ae9c-0741a6fb244b	f	2024-02-04 18:36:29.762433+00	2024-02-04 18:36:29.762433+00	ov8Y3b1QgH6A_ni9_bF9hg	ac7e66c8-b4af-4447-8579-316304758d5f
00000000-0000-0000-0000-000000000000	112	ABxRykCs3RS2uEyUzLwsGQ	68476dfe-f65f-4b33-96fb-378917fbff0a	t	2024-03-20 15:26:07.221671+00	2024-03-20 16:46:54.193709+00	\N	480a9e87-4081-470f-a4ca-58f77256042b
00000000-0000-0000-0000-000000000000	113	SSaSjX1Y0LOLgr923hesvw	68476dfe-f65f-4b33-96fb-378917fbff0a	f	2024-03-20 16:46:54.194348+00	2024-03-20 16:46:54.194348+00	ABxRykCs3RS2uEyUzLwsGQ	480a9e87-4081-470f-a4ca-58f77256042b
\.


--
-- Data for Name: saml_providers; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.saml_providers (id, sso_provider_id, entity_id, metadata_xml, metadata_url, attribute_mapping, created_at, updated_at, name_id_format) FROM stdin;
\.


--
-- Data for Name: saml_relay_states; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.saml_relay_states (id, sso_provider_id, request_id, for_email, redirect_to, created_at, updated_at, flow_state_id) FROM stdin;
\.


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.schema_migrations (version) FROM stdin;
20171026211738
20171026211808
20171026211834
20180103212743
20180108183307
20180119214651
20180125194653
00
20210710035447
20210722035447
20210730183235
20210909172000
20210927181326
20211122151130
20211124214934
20211202183645
20220114185221
20220114185340
20220224000811
20220323170000
20220429102000
20220531120530
20220614074223
20220811173540
20221003041349
20221003041400
20221011041400
20221020193600
20221021073300
20221021082433
20221027105023
20221114143122
20221114143410
20221125140132
20221208132122
20221215195500
20221215195800
20221215195900
20230116124310
20230116124412
20230131181311
20230322519590
20230402418590
20230411005111
20230508135423
20230523124323
20230818113222
20230914180801
20231027141322
20231114161723
20231117164230
20240115144230
20240214120130
20240314092811
20240306115329
\.


--
-- Data for Name: sessions; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sessions (id, user_id, created_at, updated_at, factor_id, aal, not_after, refreshed_at, user_agent, ip, tag) FROM stdin;
0a4a9b7d-ad5b-4e89-beb5-8d530629847e	cbfa1c2d-9e16-4858-8549-4636a7a7eabc	2024-01-22 07:52:45.044049+00	2024-01-22 07:52:45.044049+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36	145.52.17.231	\N
70eb7fca-cc0b-4633-afae-43378b2496dc	8e47d4c5-0f93-4e6b-ae9c-0741a6fb244b	2024-02-04 16:42:26.856481+00	2024-02-04 16:42:26.856481+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36	94.210.229.235	\N
ac7e66c8-b4af-4447-8579-316304758d5f	8e47d4c5-0f93-4e6b-ae9c-0741a6fb244b	2024-02-04 16:43:11.549917+00	2024-02-04 18:36:29.764484+00	\N	aal1	\N	2024-02-04 18:36:29.764409	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36	94.210.229.235	\N
d7887977-2a7a-4b21-9e58-466873c91a98	68476dfe-f65f-4b33-96fb-378917fbff0a	2024-02-27 00:20:48.451171+00	2024-02-27 00:20:48.451171+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36	85.76.48.221	\N
480a9e87-4081-470f-a4ca-58f77256042b	68476dfe-f65f-4b33-96fb-378917fbff0a	2024-03-20 15:26:07.217525+00	2024-03-20 16:46:54.196241+00	\N	aal1	\N	2024-03-20 16:46:54.196162	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36	176.4.140.55	\N
\.


--
-- Data for Name: sso_domains; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sso_domains (id, sso_provider_id, domain, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: sso_providers; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sso_providers (id, resource_id, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: users; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.users (instance_id, id, aud, role, email, encrypted_password, email_confirmed_at, invited_at, confirmation_token, confirmation_sent_at, recovery_token, recovery_sent_at, email_change_token_new, email_change, email_change_sent_at, last_sign_in_at, raw_app_meta_data, raw_user_meta_data, is_super_admin, created_at, updated_at, phone, phone_confirmed_at, phone_change, phone_change_token, phone_change_sent_at, email_change_token_current, email_change_confirm_status, banned_until, reauthentication_token, reauthentication_sent_at, is_sso_user, deleted_at, is_anonymous) FROM stdin;
00000000-0000-0000-0000-000000000000	4e5dafb6-ddbf-47fa-ae08-2e2e37312f8a	authenticated	authenticated	admin@admin.com	$2a$10$V4D8OCvWPem57FE36lgHu.LIwtU1bSXIq6m8Co9q40VPqqAjstVuG	2024-01-21 14:08:16.807326+00	\N		\N		\N			\N	\N	{"provider": "email", "providers": ["email"]}	{}	\N	2024-01-21 14:08:16.8018+00	2024-01-21 14:08:16.807526+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	cbfa1c2d-9e16-4858-8549-4636a7a7eabc	authenticated	authenticated	carucel666@gmail.com	$2a$10$2oANNewlqUEGtt2QMZ.qY.egylbEroif5nGFqH53YJw6qZ3/1EV3u	2024-01-22 07:52:45.042463+00	\N		2024-01-22 07:51:59.38039+00		\N			\N	2024-01-22 07:52:45.043905+00	{"provider": "email", "providers": ["email"]}	{}	\N	2024-01-22 07:51:59.372104+00	2024-01-22 07:52:45.049828+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	8e47d4c5-0f93-4e6b-ae9c-0741a6fb244b	authenticated	authenticated	jomoga8666@namewok.com	$2a$10$NcarVIO8WbjlDBX7pzO32OGOcyNPX2WS7QovOEyX4Dx3ICJS8SAQK	2024-02-04 16:42:26.855556+00	\N		2024-02-04 16:41:24.453251+00		\N			\N	2024-02-04 16:43:11.549845+00	{"provider": "email", "providers": ["email"]}	{}	\N	2024-02-04 16:38:03.431423+00	2024-02-04 18:36:29.763327+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	fd5eccd1-2685-4a1f-9736-7d212d0f226b	authenticated	authenticated	yahyabarghash8@gmail.com	$2a$10$DI1kVIajQtj2MHNbChqAWOdIzBtefSOw24ek1YvD.SyJvDJsn2RPi	2024-02-17 22:33:10.157964+00	\N		2024-02-17 22:29:23.45616+00		\N			\N	2024-02-17 22:38:34.890301+00	{"provider": "email", "providers": ["email"]}	{}	\N	2024-02-17 22:29:23.442362+00	2024-02-18 16:28:28.296107+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	68476dfe-f65f-4b33-96fb-378917fbff0a	authenticated	authenticated	mitchelladel11@gmail.com	$2a$10$NmSQKaAYxtkV5Itwir4x6OQfc.9RBXOVJEO6RcHZYmC1XJG6daHHC	2024-02-06 19:36:45.588023+00	\N		2024-02-06 19:35:03.770281+00		\N			\N	2024-03-20 15:26:07.217417+00	{"provider": "email", "providers": ["email"]}	{}	\N	2024-02-06 19:35:03.764527+00	2024-03-20 16:46:54.195205+00	\N	\N			\N		0	\N		\N	f	\N	f
\.


--
-- Data for Name: key; Type: TABLE DATA; Schema: pgsodium; Owner: supabase_admin
--

COPY pgsodium.key (id, status, created, expires, key_type, key_id, key_context, name, associated_data, raw_key, raw_key_nonce, parent_key, comment, user_data) FROM stdin;
\.


--
-- Data for Name: chapters; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.chapters (id, title, pgn, youtubeurl, imageurl, index, perspective, course) FROM stdin;
2	QueenOpening	1. e4 e5 2. Nf3 Nc6 3. Bb5 a6 {This opening is called the Ruy Lopez.} 4. Ba4 Nf6 5. O-O Be7 6. Re1 b5 7. Bb3 d6 8. c3 O-O 9. h3 Nb8 10. d4 Nbd7 11. c4 c6 12. cxb5 axb5 13. Nc3 Bb7 14. Bg5 b4 15. Nb1 h6 16. Bh4 c5 17. dxe5 Nxe4 18. Bxe7 Qxe7 19. exd6 Qf6 20. Nbd2 Nxd6 21. Nc4 Nxc4 22. Bxc4 Nb6 23. Ne5 Rae8 24. Bxf7+ Rxf7 25. Nxf7 Rxe1+ 26. Qxe1 Kxf7 27. Qe3 Qg5 28. Qxg5 hxg5 29. b3 Ke6 30. a3 Kd6 31. axb4 cxb4 32. Ra5 Nd5 33. f3 Bc8 34. Kf2 Bf5 35. Ra7 g6 36. Ra6+ Kc5 37. Ke1 Nf4 38. g3 Nxh3 39. Kd2 Kb5 40. Rd6 Kc5 41. Ra6 Nf2 42. g4 Bd3 43. Re6 1/2-1/2	\N	\N	\N	\N	2
5	LongPGN	1. d4 Nf6 2. c4 c5 3. d5 e6 4. g3 exd5 5. cxd5 b5 $5 (5... d6 { Tranposition to 'normal' fianchetto}) 6. Bg2 (6. e4 Nxe4 7. Qe2 (7. Bg2 Nd6 8. Nf3 Be7 9. O-O O-O 10. Bf4 (10. a4 Bb7 11. Bf4 b4 12. Nbd2 Ne8 13. Ne4 d6 $11) 10... Na6 11. Re1 Bb7 (11... Re8 $5 $11) 12. Nc3 Nc7 $11) 7... Qe7 8. Bg2 f5 $5 (8... Nd6 9. Be3 Na6 $11) 9. Nh3 (9. d6 Qe6 10. Nc3 Bxd6 11. g4 g6 12. gxf5 gxf5 $13) 9... b4 10. d6 (10. Be3 g6 11. Qc2 d6 12. Nd2 Bg7 13. Nxe4 fxe4 14. Ng5 O-O 15. Bxe4 Bf5 $11) (10. O-O Ba6 11. Qc2 Bxf1 12. Kxf1 h6 13. Nd2 Nd6 14. Nb3 Qf6 15. Nxc5 Be7 $11) 10... Qxd6 11. f3 Ba6 12. Qe3 Nc6 13. fxe4 Be7 14. e5 $6 (14. Qd2 Nd4 15. e5 Qxe5+ $36) (14. exf5 O-O 15. Qe4 Rae8 16. Qd5+ Kh8 17. Qxd6 Bxd6+ 18. Kd1 Rxf5 $36) 14... Nxe5 $1 15. Bxa8 O-O $36) (6. Nf3 Bb7 7. e4 Nxe4 8. Bg2 (8. Bxb5 Qa5+ 9. Nfd2 Bxd5 10. O-O Qxb5 11. Nxe4 Qc6 12. Nbc3 Be6 $11) 8... Bd6 (8... Be7 $11) 9. O-O (9. Nh4 Nf6 10. Nf5 O-O 11. Nxd6 Qe7+ 12. Ne4 Nxe4 13. O-O Nd6 $11) 9... O-O 10. Nh4 (10. Re1 f5 11. Nc3 Nxc3 12. bxc3 Na6 $11) 10... Nf6 11. Nf5 Be5 12. f4 Bd4+ 13. Nxd4 cxd4 14. Qxd4 Na6 $11) 6... d6 7. b4 (7. e4 Nbd7 8. f4 (8. Ne2 g6 9. O-O Bg7 10. Bf4 Qb6 11. Nd2 O-O 12. a4 Nh5 13. Bg5 b4 $11) 8... g6 9. Qe2 Bg7 10. e5 dxe5 (10... O-O $5 11. exf6 Nxf6 12. Qxb5 Re8+ 13. Ne2 Rb8 $36) 11. fxe5 O-O 12. exf6 Nxf6 13. Qxb5 Rb8 14. Qd3 (14. Qxb8 $2 Re8+ 15. Ne2 Rxe2+ $19) 14... Re8+ $36) 7... Bb7 8. bxc5 dxc5 9. e4 Bd6 10. Nd2 O-O 11. Ne2 Re8 12. O-O Nbd7 13. a4 (13. Bb2 a5 14. Rc1 a4 15. a3 Ne5 16. Qc2 Qd7 $11) 13... b4 14. Nc4 Ne5 15. Nxd6 Qxd6 $11 *	\N	\N	\N	\N	2
3	AnotherQueensOpening	[Event "San Sebastian"][Site "San Sebastian"][Date "1911.??.??"][Round "?"][White "Capablanca, Jose"][Black "Burn, Amos"][Result "1-0"] 1.e4 e5 2.Nf3 Nc6 3.Bb5 a6 4.Ba4 Nf6 5.d3 { This is a very solid development, to which I was much addicted at the time, because of my ignorance of the multiple variations of the openings. } 5...d6 6.c3 Be7 ( { In this variation there is the alternative of developing this Bishop via **g7**, after } 6...g6 ) 7.Nbd2 O-O 8.Nf1 b5 9.Bc2 d5 10.Qe2 dxe4 11.dxe4 Bc5 { Evidently to make room for the Queen at **e7**, but I do not think the move advisable at this stage. } ( 11...Be6 { is a more natural and effective move. It develops a piece and threatens Bc4 which would have to be stopped. } ) 12.Bg5 Be6 { Now it is not so effective, because White\\'s Queen\\'s Bishop is out, and the Knight, in going to **e3** } 13.Ne3 { defends **c4** and does not block the Queen\\'s Bishop. } 13...Re8 14.O-O Qe7 { # This is bad. Black\\'s game was already not good. He probably had no choice but to take the Knight with the Bishop before making this move. } 15.Nd5 Bxd5 16.exd5 Nb8 { In order to bring it to **d7**, to support the other Knight and also his King\\'s Pawn. White, however, does not allow time for this, and by taking advantage of his superior position is able to win a Pawn. } 17.a4 b4 ( { Since he had no way to prevent the loss of a Pawn, he should have given it up where it is, and played } 17...Nbd7 { in order to make his position more solid. The text move not only loses a Pawn, but leaves Black\\'s game very much weakened. } ) 18.cxb4 Bxb4 19.Bxf6 Qxf6 20.Qe4 Bd6 21.Qxh7+ Kf8 { With a Pawn more and all his pieces ready for action, while Black is still backward in development, it only remains for White to drive home his advantage before Black can come out with his pieces, in which case, by using the open h-file, Black might be able to start a strong attack against White\\'s King. White is able by his next move to eliminate all danger. # } 22.Nh4 Qh6 { This is practically forced. } ( { Black could not play } 22...g6 { because of } 23.Bxg6 { White meanwhile threatened } ) 23.Qxh6 gxh6 24.Nf5 h5 25.Bd1 Nd7 26.Bxh5 Nf6 27.Be2 Nxd5 28.Rfd1 Nf4 29.Bc4 Red8 30.h4 a5 { Black must lose time assuring the safety of this Pawn. } 31.g3 Ne6 32.Bxe6 fxe6 33.Ne3 Rdb8 34.Nc4 Ke7 { Black fights a hopeless battle. He is two Pawns down for all practical purposes, and the Pawns he has are isolated and have to be defended by pieces. } 35.Rac1 Ra7 { White threatened } 36.Re1 Kf6 37.Re4 Rb4 38.g4 Ra6 ( { If } 38...Rxa4 { then } 39.Nxd6 { would of course win a piece. } ) 39.Rc3 Bc5 40.Rf3+ Kg7 41.b3 Bd4 42.Kg2 Ra8 43.g5 Ra6 44.h5 Rxc4 45.bxc4 Rc6 46.g6 { Black resigns. } 1-0	\N	\N	\N	\N	2
6	YahyaPGN	1. e4 c5 2. Nf3 (2. c3 d5 3. exd5 Qxd5 4. d4 Nf6 5. Nf3 Bg4 6. Qa4+ (6. c4 Bxf3 7. cxd5 Bxd1 8. Kxd1 cxd4 9. Bc4 Nbd7 10. d6 e5 11. Re1 Rc8 12. Bb3 Bxd6) (6. Be2 e6 7. Na3 (7. h3 Bh5 8. Be3 cxd4 9. cxd4 Be7 10. Nc3 Qd6 11. Nb5 (11. O-O Nc6 12. a3 (12. g4 Bg6 13. Ne5 Nxe5? { I see this move as the engines says a bad move but there is a game where the white lost } (13... O-O 14. f4 Nd5 15. Nxd5 Qxd5 16. f5? (16. Nxc6 bxc6 17. f5?? exf5 18. gxf5) 16... Nxe5 17. dxe5 Qxe5) 14. dxe5 Qxe5 15. Bb5+ (15. Qa4+ Kf8 16. Bf4 Qc5 17. Bf3 Qb6 18. Qb3 h5 19. g5 Nd7 20. Bxb7)) 12... O-O (12... a6) 13. Qb3 (13. g4 Bg6 14. Ne5) 13... a6 14. Qa4 (14. Rfd1 Rfd8 15. Rac1 b5 16. Qa2 b4 17. Na4 (17. d5 exd5 18. Na4 Bxf3 19. Bxf3 Ne5 20. Be2 (20. Nc5 Nxf3+ 21. gxf3) (20. Nb6?? Nxf3+ 21. gxf3) (20. Bxd5 Nxd5 21. Nb6 Nf3+ 22. gxf3 Qg6+ 23. Kf1 Nxe3+ 24. fxe3))) 14... b5)) 7... Be7 (7... Nc6 8. Be3 cxd4 9. Nb5 O-O-O 10. Nbxd4 e5 11. Nxc6 Qxc6 12. Qc2) 8. Be3 cxd4 9. Nb5 (9. Nc4) 9... O-O 10. Nbxd4 e5 11. Nb3 Nc6 12. h3 (12. O-O Rfd8 13. Qc1 Rac8) 12... Bf5 (12... Bh5) 13. O-O Rfd8 14. Qc1 Rac8) 6... Nc6 7. Bc4 Qd7 8. O-O (8. dxc5 Bxf3 (8... e6 9. Be3 Bxf3 10. gxf3) 9. gxf3 e6 10. b4 Be7 11. O-O (11. Be3 Nd5 (11... O-O) 12. Bxd5 exd5 13. Nd2 Bf6 14. Rc1 O-O 15. f4 Rfe8 16. Qb3 d4 17. cxd4 Nxd4 18. Qc4 Rxe3+ 19. fxe3 Bh4+ 20. Kd1 Qg4+ 21. Nf3 Qxf3+ 22. Kd2 Qf2+ 23. Kd1 Nf5 24. Rc3 Nxe3+ 25. Rxe3 Qxe3)) 8... Bxf3 9. gxf3 cxd4 10. cxd4 Nxd4) (2. d4 cxd4 3. c3 dxc3 4. Nxc3 Nc6 5. Nf3 e6 6. Bc4 Be7 7. O-O d6 8. Qe2 Nf6 9. Rd1 e5 10. Bg5 (10. h3 O-O 11. Be3 Be6 12. Bxe6 fxe6 13. Ng5 (13. Rac1 h6! (13... Rc8! 14. b4 { alkhatib said it gives draw chances after black playes h6 } (14. b3) 14... Nxb4! (14... a6!)) 14. Qc4 Qc8 15. b3 Rd8) 13... Qd7 14. Qc4 Nd8 15. Rac1 Rc8 16. Qb3 h6) 10... Bg4 11. h3 Nd4 12. Rxd4 exd4? (12... Bxf3 13. Qxf3 exd4 14. e5 dxe5 15. Re1?) 13. hxg4 dxc3 14. e5 dxe5 15. Bb5+ Kf8 16. Nxe5 h6 (16... Bd6 17. Nd7+ Kg8 18. Rd1)) (2. f4 d5 3. exd5 Nf6 4. c4 e6 5. dxe6 Bxe6 6. Nf3 Bd6 (6... Nc6 7. d3 (7. Nc3 Bd6 8. d4 { the eingine gives ge7 best move but kasparov and khatib play cxd4 } 8... cxd4?! 9. Nxd4 O-O 10. Nxe6 fxe6 11. Be3 (11. Be2) 11... Qe7 12. Qf3 (12. Be2 e5 13. fxe5 Qxe5 14. c5 Bc7) 12... Bb4 13. Be2 e5 14. O-O (14. O-O-O? Bxc3 15. bxc3) 14... exf4 15. Bxf4?? (15. Qxf4?? Bxc3 16. bxc3 Ne4) (15. Bf2 Rae8 16. Qxf4??) 15... Nd4 16. Qe3 Qxe3+ 17. Bxe3 Bxc3 18. bxc3 Nxe2+) 7... Bd6) 7. d4 (7. d3 Nc6 (7... O-O 8. Be2 Qc7 9. g3 Bh3 (9... Re8!) 10. Ng5 Qd7 11. Nxh3 Qxh3 { line recommended by khatib }) 8. Be2) 7... cxd4 8. Nxd4 Bg4 9. Be2 O-O 10. Bxg4 Nxg4 11. Qxg4 Bb4+ 12. Bd2 Qxd4 13. Bxb4 Re8+ 14. Kf1 Qxc4+ 15. Kf2 Qxb4) (2. Nc3 Nc6 3. f4 g6 4. Nf3 Bg7 5. Bc4 (5. Bb5 d6 6. Bxc6+ (6. O-O Bd7 7. d3 a6 8. Bxc6 Bxc6 9. Qe1 Qd7 10. a4 b6 11. b3 Nf6 12. h3 Nh5 13. Bd2 f5 14. exf5 (14. Qh4 Bf6 15. Qe1 Nxf4?? 16. Bxf4) (14. Rb1 O-O 15. Qh4?! Bf6 16. Qf2 (16. Qe1 Bxc3 17. Bxc3 fxe4 18. dxe4 Rxf4)) 14... gxf5 15. Qh4 Nf6 16. Rae1 O-O-O 17. a5 b5 18. b4 cxb4 19. Na2 Nd5 20. Nxb4 Bf6 21. Qf2 Nxb4 22. Bxb4 Rhg8) 6... bxc6 7. d3 Rb8 8. O-O Nh6 9. Qe1 O-O 10. b3 Bg4 11. h3 Bxf3 12. Rxf3 f5 13. exf5? (13. Bd2 e6 (13... fxe4 14. dxe4 e5 15. f5 gxf5 16. Bxh6 Bxh6 17. exf5 Qe7?!) 14. Rb1 (14. Na4?!) 14... Qe7 15. Na4 fxe4 16. dxe4 e5 17. f5 gxf5 18. Bxh6 Bxh6 19. exf5 Rbe8 { blask is better }) 13... Nxf5) 5... e6 6. f5 (6. O-O Nge7 7. e5 (7. d3 d5 8. Bb5 O-O 9. Bxc6 Nxc6 10. Bd2 b5) 7... d6 8. exd6 Qxd6 9. Ne4 (9. d3 O-O 10. Ne4 Qc7 11. Qe1 Nf5 12. Qf2 Nfd4?! (12... b6 13. g4 Nfd4? { this move was played by boris the israeli player } 14. Nxd4 Bxd4 15. Be3 Bg7 16. Qh4 Qd8 (16... Na5! 17. f5) (16... Bb7? 17. f5 Ne5 18. f6 Bxe4 19. fxg7 Rfd8 20. Bf4 Bb7 21. Qg3 f6 22. Bxe6+ Kxg7) 17. Qh3 (17. g5 Bb7! (17... Nd4!!) 18. Nf6+ Bxf6 19. gxf6 Nd4 20. Bxd4 Qxd4+ 21. Rf2 Qxb2 22. Raf1 Rad8 23. a4 h6!! 24. Qxh6 Qxf6 25. f5? exf5) 17... Na5 18. Bb3 (18. Rad1) 18... Nxb3 19. axb3 f5 20. gxf5 exf5) 13. Nxd4 Bxd4 14. Be3 Bxb2 15. c3 Bxa1 16. f5 Bxc3 17. Nxc3 exf5? (17... gxf5 18. Bxc5 Qd8 19. d4 b6 20. Bxf8 Qxf8)) 9... Qc7 10. Nxc5? (10. d3) 10... Nd4 11. b4 Nxf3+ 12. Qxf3 Bd4+ 13. Kh1 Bxa1 14. Bb5+ Nc6 15. c3 O-O 16. Nb3 a5 17. bxa5 Nxa5 18. Nxa1 Bd7) 6... Nge7 7. fxe6 dxe6 8. O-O h6 9. Qe1 (9. d3 g5 (9... b6! 10. Qe1 g5 11. Qg3 Ng6 12. Be3 Nce5) (9... O-O 10. Qe1 g5 11. Qg3 Ng6! (11... f5!)) 10. Qe1) 9... g5 10. Qg3 Ng6) (2. b4 cxb4 3. a3 (3. Nf3 g6 4. d4 Bg7) (3. d4 Nf6 4. e5 (4. Bd3 Nc6 5. d5 (5. Nf3) (5. Ne2 d6 6. O-O g6 7. Nd2 Bg7 8. f4 O-O 9. f5 (9. Rb1 Bg4 10. Bb2 Nd7 11. Nf3) (9. Kh1 Bg4 10. Bb2 Nd7 11. Nf3 Nc5 12. dxc5 (12. Rb1 Nxd3 13. Qxd3 d5 14. exd5? (14. e5 Qd7 15. Ng3 f6) 14... Qxd5 15. c3 (15. c4 bxc3) (15. a4 Bf5 16. Qb5 Rfd8))) 9... a5 10. Nf3 e5 11. fxg6 (11. Bg5 h6 12. Bxf6 Bxf6 13. fxg6 fxg6) 11... fxg6 $19) 5... Ne5 6. f4?! (6. Be2 e6 7. dxe6 fxe6 8. f4 Ng6 9. h4?? (9. Nc3) (9. Nd2??) (9. Qd3 d5 (9... Qc7)))) 4... Nd5 5. a3 d6 6. axb4 dxe5 7. dxe5 Nc6 8. b5 (8. Nf3 Ndxb4 9. Qxd8+ Kxd8 (9... Nxd8 10. Na3 Bf5 11. Nd4 e6 12. Nab5 Ndc6 13. Nc7+?? Kd7) 10. Na3 Bf5) 8... Nxe5) 3... bxa3 4. d4 (4. Nf3 g6 5. d4 (5. Bc4 Bg7 6. Rxa3 Nc6 7. O-O d6 (7... Nf6?! 8. e5 Ng4 9. d4 d5 10. Ba2) 8. d4 Nf6 9. Qe2 Bg4 10. Bb2 O-O 11. Nbd2 d5 12. exd5 Nxd5) 5... Bg7 6. Bxa3 (6. Bc4) 6... Nc6 7. Nc3 (7. c3 d6 8. Be2 (8. Bd3 Nf6 9. O-O O-O 10. Nbd2 Qc7 11. Re1 { you are simply upper pawn as black } 11... b6) 8... Nf6 9. O-O Bg4 (9... O-O))) (4. Bxa3 d6) (4. Bc4) 4... e6 (4... Nf6 5. e5 Nd5) 5. Nf3) (2. Bc4) 2... g6?! { Inaccuracy. d6 was best. } (2... Nc6 3. d4 cxd4 4. Nxd4 g6) (2... d6 3. c3 Nf6 4. h3 Nc6 5. Bd3 e5 6. O-O Be7 7. Bc2) 3. d4 (3. c3 Bg7 4. d4 cxd4 5. cxd4 d5 6. e5 (6. exd5 Nf6 7. Nc3 (7. Bb5+ Nbd7 (7... Bd7 8. Bc4 O-O 9. Nc3 Bf5 10. O-O) 8. Bc4) 7... Nxd5 8. Bc4 Nxc3 9. Qb3 { Lkhatib is teaching us wrong moves he says here that Kxc3 is a mistake althought it is the first move recommended byt the engine. } 9... Ne4 10. Bxf7+ Kf8 11. O-O Nc6 12. Bf4 Qb6 13. h3 Nd6 14. Bxd6 exd6 15. Rac1 Qxb3 16. Bxb3 Bf6 17. Ba4 Bd7 18. d5 Nb8 (18... Ne5 19. Nxe5 Bxa4 20. Nd7+ (20. Nf3) 20... Bxd7 21. Rc7 Ke7 22. Re1+ Kd8 23. Rxb7 Bd4 24. Rc1 Rf8 25. Rcc7 Bxf2+ 26. Kh2 Rf7 27. a4 Rc8 28. Rc6 Rxc6 29. dxc6 Be6 30. Rb8+ Kc7 31. Rb7+ Kxc6)) 6... Bg4 7. Bb5+ (7. Be2 Nc6 8. Be3 Nh6 9. Qd2 Nf5 10. Nc3 O-O 11. h3 Bxf3 12. Bxf3 Nxe5 (12... e6 { this move recommended by khatib } 13. Bg4 (13. O-O f6 14. exf6 Qxf6) 13... Nxe3 14. fxe3 f5 15. exf6 (15. Bf3 f4 { by khatib but not best } (15... Qh4+ { this is best })) 15... Qxf6 16. O-O-O) 13. dxe5 d4 14. Bf4 dxc3 15. Qxc3 Rc8 16. Rd1 Qb6 17. Qa3 (17. Qb3 Qa5+) 17... Rc4 18. Bh2 e6 19. g4 Nd4 20. O-O) 7... Nc6 (7... Nd7 8. Nbd2 a6 9. Bd3 e6 10. h3 Bxf3 11. Nxf3 Ne7 12. O-O (12. h4) 12... Qb6 13. Rb1 Nc6 14. Be2 (14. b4) 14... O-O 15. b4 f6 16. exf6 Nxf6 17. b5 axb5 18. Rxb5 Qa7 19. a3 (19. Rb2)) 8. Bxc6+ bxc6 9. O-O e6 10. h3 (10. Nc3 Ne7 11. h3 Bxf3 12. Qxf3 O-O) (10. Nbd2 Ne7 11. Nb3 O-O 12. h3 Bxf3 13. Qxf3 f6 14. exf6 Bxf6 15. Qc3 Qd6 16. Qc5 Nf5 17. Qxd6 Nxd6 18. Re1 Nf5 19. Be3 Rab8 20. Bf4 Rb5 (20... Rb4 21. Rad1 Bxd4 22. Bd2 Rc4 23. Nxd4 Rxd4 24. Rxe6 c5 (24... Rb8 25. b3 c5 26. Kf1 (26. Ree1 Kf7 27. Kf1 Rb6 (27... Rb7) 28. Bc3 Rxd1 29. Rxd1 d4 30. Be1 (30. Bd2 Ke6) 30... Ke6 31. g4 (31. b4 Kd5 32. bxc5 Kxc5) 31... Nd6 32. b4 Kd5 33. bxc5 Kxc5 34. f3 Nc4 (34... Ra6) 35. Bf2 Rd6 36. f4)))) 10... Bxf3 11. Qxf3 Ne7 12. Nc3 O-O) 3... cxd4 4. Nxd4 (4. Qxd4 Nf6 5. Nc3 (5. e5 Nc6 6. Qh4 (6. Qa4 Nd5 7. Bc4 (7. c4 Nc7) (7. Qe4 Nb6 (7... e6) (7... Nc7 8. Nc3 (8. Bc4) 8... Bg7 9. Bc4 (9. Bf4 b5 10. Bxb5 (10. O-O-O b4 11. Nd5 Nxd5 12. Rxd5 Bb7 13. Bb5 e6 (13... Na5?! 14. Rhd1 Bxd5 15. Rxd5 O-O { whit has great compensation 2+ }) 14. Rd6 O-O 15. Kb1 Qa5 16. Qe2 Ne7 17. Rxd7 Bd5 18. Rxe7 (18. Bc4 Bxc4 19. Qxc4 Rfc8 20. Qd3 Nd5 21. Be3 Qa4 22. Rd6 Bf8 23. Ra6 Qd7) (18. b3 Bxf3 19. gxf3 Nd5?? 20. Bd2? Rad8 21. Rxd8 Rxd8 22. Bd3?! Qa3 23. Re1?? { i shoed this line out of curiosity, because its completely losing for black } 23... Nc3+ 24. Bxc3 bxc3) 18... Qxa2+ 19. Kc1 Qa1+ 20. Kd2 Qxh1 21. Qf1 Qxf1) 10... Nxb5 11. Nxb5 Qa5+ 12. Nc3 Rb8 13. O-O-O) 9... b5 10. Nxb5 (10. Bxb5 Nxb5 11. Nxb5 Qa5+ 12. Nc3 Rb8) (10. Bb3) 10... Nxb5 11. Bxb5?? (11. Qd5 O-O 12. Bxb5 Bb7) 11... Qa5+ 12. Bd2 Qxb5) (7... Ndb4 8. Bb5 Bg7 (8... d5??) (8... a6 9. Ba4 b5 10. Bb3 d5 11. exd6 (11. Qe2 d4) 11... Qxd6 12. O-O Bf5 13. Qe2)) 8. Nc3 (8. Bf4 d5 9. exd6 Bf5 (9... Bg7?! 10. dxe7 (10. Nc3 Bf5 (10... O-O 11. dxe7? (11. O-O-O exd6 (11... Bf5 12. dxe7 Qxd1+?? 13. Kxd1 Bxe4 14. exf8=Q+ Rxf8) (11... Bxc3 12. bxc3 Bf5 13. dxe7 (13. Qe3 e5 (13... exd6 14. Rxd6 Nd7 15. Qd2 Qa5 16. Rxd7 Bxd7 17. Kb2 (17. Qxd7 Rad8 18. Qxb7 Qxc3 19. Bd2 Rxd2!! 20. Nxd2 Nb4))) 13... Qxd1+ 14. Kxd1 Bxe4 15. exf8=N Rxf8) 12. Rxd6 { Savitskiy, Sergey - Castaldo, Folco, 0-1, Olomouc op, 2010, https://lichess.org/tXU0auG6 } 12... Bd7 13. Be2 Re8 14. Qd3 Nb4 15. Qd2 Bxc3!! 16. bxc3 Nxa2+ 17. Kb2 Na4+!! 18. Kxa2 Qa5 19. Rxd7 Rxe2!! 20. c4 (20. Qd3) (20. Qd4 Nxc3+ 21. Kb3 Qa2+ 22. Kxc3 Qxc2+ 23. Kb4 a5+ 24. Kb5 (24. Ka3 Qa2#))) 11... Nxe7 (11... Qxe7?! 12. Qxe7 Bxc3+ 13. bxc3 Nxe7) 12. Rd1 Bxc3+ 13. bxc3 Ned5 14. c4 Bf5 15. Qe2 (15. Qd4 Nxf4) (15. Qe5??) 15... Nxf4 16. Rxd8 Raxd8!! 17. Ne5 (17. Qe3 Rfe8 18. Ne5 Nxc4!! 19. Bxc4 Nxg2+ 20. Ke2 Nxe3 21. Bxf7+ Kg7 22. Bxe8 Rxe8 23. fxe3 (23. Nd3 Nxc2+ 24. Kd2 Nd4)))) 10... Qxe7?! (10... Nxe7 11. Bb5+ Bd7 12. Nc3 Bxc3+ 13. bxc3 Bxb5 14. Qe5 O-O 15. Qxb5) 11. Qxe7+ Kxe7 (11... Nxe7 12. Be5 { white has advantage upper pawn with no compensation } 12... f6)) 10. dxe7?? Bxe7 11. Qe3 Nd5 12. Qd2 O-O 13. Bg3 Bf6 14. Nc3 Nxc3 15. bxc3 Qa5 16. Nd4 Rfe8+ { black is winning }) 8... d5 9. exd6 Bf5 10. dxe7 (10. Qe2 Bg7 (10... Qxd6 11. Nb5 Qb8 12. Nbd4 Bd7) 11. dxe7 Nxe7 (11... Qxe7 12. Qxe7+ Nxe7 13. Bd3 (13. Bb5+ Nc6 14. Be3 Bxc2 15. Nd4 Bxd4 16. Bxd4 O-O 17. Bxc6 bxc6) 13... Bxd3 14. cxd3 Rc8)) 10... Bxe7)) 6... Nxe5 7. Nxe5 Qa5+ 8. Bd2 (8. Nc3 Qxe5+) 8... Qxe5+ 9. Be2 Qxb2 10. Bc3 Qxc2 11. O-O Bg7 12. Bxf6 Bxf6) (5. Bb5 a6 (5... Nc6) 6. e5 (6. Ba4 b5 7. Bb3 Nc6) 6... axb5 7. exf6 Nc6 8. Qh4 (8. Qe3) (8. fxe7 Qxe7+ 9. Qe3 b4 10. O-O Qxe3 11. Bxe3 Bg7 12. c3 (12. Bc5??) 12... O-O (12... d5 { [%csl Gd5] } 13. Bc5 (13. Nd4 Nxd4 (13... O-O 14. a3 { this is the best move } 14... Nxd4 (14... Re8 15. Nxc6 bxc6 16. cxb4 Ba6 17. Rd1 Bxb2 18. Ra2 Bg7 19. a4?? Bc4 20. Rad2 (20. Ra3 Bb2 21. a5 d4 22. Bxd4 Bxd4)) 15. cxd4 Bf5 16. Rc1) 14. Bxd4 Bxd4 15. cxd4) 13... Be6) 13. Bc5 Re8 14. Bd6 Re6) 8... Ra4 9. fxe7 Bxe7 10. Qh6 (10. Qh3?? d5?! { dubios but still winning } (10... h5! 11. Nc3 d5 12. Qg3 h4 13. Nxh4 (13. Nxa4 hxg3 14. Nc3 gxf2+ 15. Kxf2) 13... Raxh4)) 10... Re4+ 11. Be3 Nd4 (11... Bf6?? { khatib said this is a good move but it is actually blunder } 12. Nc3 Bxc3+ 13. bxc3 Qe7 14. O-O f6 15. Rfe1 Kf7) 12. Nxd4 Rh4 13. Qxh4 Bxh4) 5... Nc6 6. Qa4 d6 7. e5 dxe5 8. Nxe5 Bg7 (8... Qd4 9. Nxc6 (9. Nc4 Qd8 (9... Ng4 10. Be3 Nxe3 11. Nxe3 (11. fxe3 Qc5) 11... Qxa4 12. Nxa4 e6 13. O-O-O) 10. Bf4 Bg7 11. Rd1 Bd7) 9... Qxa4 10. Nxa4 bxc6) 9. Nxc6 (9. Bb5 O-O 10. Nxc6 bxc6 11. Bxc6 Bd7 12. O-O Rc8 13. Bxd7 Qxd7 14. Qxd7 Nxd7 15. Bd2 Nb6) 9... bxc6 10. Qxc6+ Bd7 11. Qa6 (11. Qf3 O-O 12. Bc4 Qc7 13. Bb3 Bc6 14. Qh3 Ne4 15. Nxe4 (15. O-O Nxc3 16. bxc3 Bb5 17. Rd1 (17. c4??) (17. Re1) 17... Be2) 15... Bxe4 16. O-O (16. c3 a5 17. O-O a4 18. Bd1 a3 19. Bb3 Rad8 20. Re1 Rd3 21. Qg4 Ba8) 16... a5 17. c3 a4 18. Bd1 a3 19. bxa3 Qxc3 20. Qxc3 Bxc3 21. Be3 Bxa1) 11... Qc7) 4... Nc6 5. Nc3 (5. c4 Bg7 6. Be3 (6. Nc2 Nh6 { Here we have two approaches, Nh6 and Nf6 } (6... Nf6 7. Nc3 O-O 8. Be2 d6 9. O-O Nd7 10. Bd2 Nc5 11. b4 Ne6 12. Rc1 a5 13. b5 Ncd4 14. Nxd4 Nxd4 15. Bg5 h6 16. Bh4 g5 17. Bg3 e5 18. Nd5 (18. Bg4 Bxg4 (18... Be6 19. Nd5 Rc8 20. f3 Rc5 21. Qd3 (21. Qd2) 21... Bxd5 22. cxd5 (22. exd5 f5 23. Bh5) 22... Rxb5) 19. Qxg4 Qc8 20. Qxc8 Raxc8 21. Nd5 f5 22. Ne7+ Kf7 23. Nxc8 Rxc8) 18... Be6) 7. Nc3 O-O 8. Be2 f5 (8... d6 9. O-O (9. Bg5 f5 10. exf5 Nxf5 11. g4 Nfd4 12. Nxd4 Nxd4 13. Be3 Nxe2 14. Qxe2) 9... f5 10. Ne3?! (10. exf5 Nxf5 11. Bg5 Be6) 10... f4 11. Nc2 (11. Ng4 Nxg4 12. Bxg4 Ne5?! { Alkhatib said don't activate his queen by taking Bxg4, but it turns out that he is wrong, best move is to exchange his bishop } (12... Bxg4 13. Qxg4 Ne5? (13... Qc8 14. Qxc8 Raxc8 15. Bd2 Nd4 16. b3 b5 17. cxb5 (17. Kh1) (17. Nd5 Kf7 18. Bxf4 (18. Rab1 bxc4 19. bxc4 Ne2+ 20. Kh1 Rxc4 21. f3 Rfc8 22. Rb7)) 17... Rxc3 18. Bxc3 Ne2+ 19. Kh1 Nxc3 20. f3 Nxb5) 14. Qe6+ Rf7 15. Nd5 g5) 13. Be2 g5 14. Nd5 e6 15. Nc3) 11... g5) 9. Bg5 fxe4 10. Qd5+ Nf7 11. Be3 e6 12. Qxe4 d5 13. cxd5 exd5 14. Qa4 d4 15. Rd1 Bd7) 6... Nh6 (6... Nf6 7. Nc3 O-O 8. Be2 d6 9. O-O (9. Nc2 Nd7 10. Qd2 Nc5 11. f3 a5 12. b3 f5 13. exf5 Bxf5 14. O-O a4 15. b4 Bxc2 16. bxc5 Bf5 17. cxd6 Qxd6) 9... Nxd4 (9... a6) 10. Bxd4 Bd7 11. Qd2 Bc6 12. f3 (12. Bd3 a5 13. Rae1 a4 14. f4 (14. Nd5 Nd7 15. Bxg7 Kxg7 16. Re3 e5 17. Rh3 h5 18. g4 Bxd5 19. exd5 Nf6 20. gxh5 (20. g5 Nd7) 20... Nxh5) 14... Qa5 15. e5 Ng4 16. Qe2 dxe5 17. fxe5 h5 18. h3 Rad8) 12... a5 13. b3 (13. Kh1 Nd7 14. Bxg7 Kxg7 15. f4 (15. b3) 15... a4 16. Rf3 Qa5 17. Rh3 f5 (17... Kg8 18. f5 (18. Qe1 f5) 18... Qe5 19. fxg6 fxg6)) 13... Nd7 14. Bxg7 (14. Bf2 Be5 (14... Nc5 15. Rab1 (15. Rad1 Be5) 15... Be5 (15... e6 16. a3 (16. Rfd1 Be5 17. Nb5 (17. h3) (17. Bf1)) 16... a4 17. b4 Nb3 18. Qd3 Qf6 19. Na2 d5 20. b5 dxc4 21. Qxc4 Nd2 22. Qb4 Bxe4 23. fxe4 Nxb1 24. Qxb1) 16. Nb5 (16. f4 Bxc3 17. Qxc3)) 15. Rad1 Nc5 16. f4 Bxc3 17. Qxc3 Nxe4 18. Qe3 Qc7 19. Bh4 f5 20. Bd3 Rf7 21. Bxe4 Bxe4 22. a4) (14. Be3 Nc5 15. Rab1 e6 16. Rfd1 Be5 17. Nb5 (17. Bd4 Qe7 18. Bxe5 (18. Qe3 Bxd4 19. Qxd4 (19. Rxd4 e5 20. Rd2 Ne6 (20... f5 21. exf5 gxf5 22. f4 Ne6 23. fxe5 f4) 21. Qb6?? Nd4)) (18. Bf1 Rad8 19. Bxe5 (19. Qe3 Bxd4 20. Rxd4 e5 21. Rd2 f5 22. exf5 gxf5 23. f4 Ne6 24. fxe5 f4 25. exd6 fxe3 26. dxe7 Rxf1+ 27. Rxf1 Rxd2)) 18... dxe5) 17... Qh4 18. g3 (18. h3 Qg3 { [%csl Ge3] } 19. Bf2 Qh2+ 20. Kf1 Nxe4 21. Qe3 Qh1+ 22. Bg1 Ng3+ 23. Kf2 Nh5 24. Bf1 Bg3+ 25. Ke2 Nf4+ 26. Kd2 Bxb5 27. Kc3 Nxg2 28. Qg5 Be5+ 29. Bd4 Nf4 30. Bxe5 dxe5 31. Qxe5 Qxf3+) (18. Bf2 Qxh2+ 19. Kf1 Qh1+ 20. Bg1 Nxe4 21. fxe4 f5 (21... Bxe4) 22. Bf3 fxe4) 18... Bxg3 19. hxg3 Qxg3+ 20. Kf1 Nxe4 21. fxe4 f5 22. e5 Bg2+ 23. Kg1 Bh3+ 24. Kh1 Qg2#) 14... Kxg7 15. Kh1 Qb6) 7. Nc3 (7. Qd2?? Ng4) (7. h3) 7... O-O (7... Ng4 8. Nxc6 Nxe3 9. Nxd8 Nxd1 10. Rxd1 Bxc3+ 11. bxc3 Kxd8) 8. Be2 (8. f3 Qb6 9. Na4 (9. Ncb5 Qa5+ 10. Bd2 Qd8 11. Qc1 Ng4 12. Nxc6 (12. Nc2! a6 13. Nc3 Nf6) 12... dxc6 13. Nc3 Ne5 14. f4??) 9... Qa5+) 8... f5?! (8... d6 9. O-O f5 10. exf5 Nxf5 (10... Bxd4) 11. Nxf5 Bxf5 12. Qd2 { here we we two ideas } 12... Qa5 (12... Rc8 13. Nd5 e6 14. Bg5 Qd7 15. Ne3 Nd4 16. Nxf5 Nxe2+ 17. Qxe2 Rxf5 18. Be3 b5 19. cxb5 Qxb5 20. Qxb5 Rxb5 21. Rad1 Rxb2 22. Rxd6 Rxa2 23. Rxe6 Ra8) 13. Rac1 Be6 14. Bh6 Bxh6 15. Qxh6 Rf7 (15... Qe5 16. Qe3) 16. Qe3 Qe5 17. Qxe5 Nxe5 18. b3 Raf8) 9. O-O (9. exf5 Bxd4 10. Bxh6 (10. Bxd4 Nxf5 11. Bc5 d6 12. Ba3 Nfd4 13. O-O Bf5 14. Rc1 Qd7 (14... Rf7) 15. Nd5 Rf7 16. b3 e5 17. Bb2 Raf8 (17... Be6 18. b4? Bxd5 (18... Nxe2+ 19. Qxe2)) 18. b4 Be6 19. b5 Bxd5 20. cxd5 Nxe2+ 21. Qxe2 Ne7) 10... Rxf5 11. O-O d6 12. Rc1 (12. Bd3 Rf7 13. Qd2 Qa5 14. Be4 Bxc3 15. bxc3 Be6 16. Rfb1 Qc7 17. Bd5 (17. Bxc6) 17... Bxd5 18. cxd5 Ne5 19. Rb4 Rc8 20. Qd4 b6) (12. Qd2 Qa5)) 9... f4 10. Nxc6 bxc6 11. Bd4 Nf7 12. Bxg7 Kxg7 13. Rb1 Qc7 { [%cal Gc7e5,Gf7e5] } 14. b4 Qe5 15. Qd2 Ng5 16. f3 d6) (5. Nxc6 bxc6 6. Qd4 Nf6 7. e5 Nd5 8. e6 Nf6 9. exd7+ (9. exf7+ Kxf7 { [%cal Gf8g7,Ge7e5,Gh8e8] }) 9... Bxd7 10. Bc4 Bg7 11. O-O O-O 12. Qh4 Rb8 13. Bb3 a5 14. a3 Rb5 15. Nc3 Rh5 16. Qg3 Nd5) (5. Be3 Nf6 (5... Bg7) 6. e5? (6. Nxc6 bxc6 7. e5 Qa5+ 8. Nc3 Qxe5 9. Be2 Bg7 10. O-O) (6. Nc3 Bg7 7. Bc4 (7. Qd2 O-O 8. O-O-O Ng4 9. Nxc6 bxc6 10. Bg5 (10. Bd4 Bh6 11. Be3 (11. f4 e5 12. Bxe5) 11... Nxe3 12. fxe3 d6)) (7. f3 O-O 8. Qd2 (8. Bc4 Qb6 9. Rb1 (9. Bb3 Nxe4 (9... Ng4 10. fxg4 Bxd4 11. Nd5 (11. Bxd4 Qxd4 12. Qxd4 Nxd4) 11... Qa5+ 12. Bd2 Qd8 13. c3 Bg7) 10. Nd5 (10. fxe4 Bxd4 11. Bxd4 Qxd4 12. Qxd4 Nxd4 13. O-O-O Nc6 14. Nd5 e6 (14... Rb8) 15. Nf6+ Kg7 16. Nxd7 Rd8 17. Nc5 b6) 10... Qa5+ 11. c3 Nf6 12. Nxc6 bxc6?? (12... dxc6 13. Nxe7+ Kh8 14. Nxc8 Raxc8 15. O-O c5) 13. Nxe7+ Kh8 14. Qd6 Ba6 15. O-O-O) 9... Nxe4 (9... Qb4 10. Bb3 Nxe4 11. a3 Nxc3 12. axb4 Nxd1 13. Rxd1) 10. Nd5 (10. fxe4 Nxd4 11. Nd5 Qc5 12. c3 Qxc4 13. Bxd4 e5 14. b3 Qa6) 10... Qa5+ 11. b4 Nxb4 12. Nxb4 (12. Bd2 Nxd2 13. Qxd2 e6 14. Nxb4)) 8... d5 9. O-O-O dxe4 (9... Nxd4 10. Bxd4 (10. Qxd4) 10... dxe4 11. Nxe4 Nxe4 12. fxe4 Bxd4 13. Qxd4 Qc7) 10. Nxc6 Qxd2+ 11. Bxd2 bxc6 12. Nxe4 Nxe4 13. fxe4) (7. Be2)) 6... Nd5 (6... Nxe5 7. Nc3 Nc6 8. f4 d5 9. h3 Bg7 10. Qd2 Bf5 11. Bb5) 7. Nxc6 bxc6 8. Qd2 Nxe3 9. Qxe3 Bg7 10. Nd2 O-O 11. f4 (11. O-O-O?) 11... d6 12. O-O-O dxe5 13. fxe5 Qa5) 5... Bg7 6. Be3 (6. Nde2 Nf6 7. g3 b5) 6... Nf6 7. Nxc6 (7. Be2 O-O 8. O-O (8. Nb3 a5 9. a4 Nb4 10. e5 (10. Bf3 { another move } 10... d6 (10... e5)) (10. O-O d5 11. e5 Ne4 12. Nxe4 dxe4) (10. f4 d6 (10... d5 11. e5 Bf5 12. exf6 (12. Nd4 Ne4 13. Nxf5 gxf5 14. O-O (14. Nb5 e6 15. Bf3 f6 16. Bxe4 dxe4 17. Nd6?? fxe5 18. fxe5) 14... Rc8) 12... Nxc2+ 13. Qxc2 (13. Kf2 Nxe3 14. Kxe3 Bxf6 15. Nxd5 Bxb2 16. Ra2 Bg7 17. Kf2 Rc8 18. Bf3 e6 19. g4 { only move } (19. Ne3?? { natural move but blunder } 19... Qb6 20. Ke2 (20. Rd2 Rfd8 21. Kg3 (21. Re1)) 20... Rc3 21. Nxf5 gxf5) 19... Qh4+ 20. Kg2 Bxg4 21. Bxg4 Rcd8 22. Bf3 exd5)) 11. e5?? Ng4 12. Bxg4 Bxg4 13. Qc1 { [%csl Gg4] } 13... Bf5 14. O-O) 10... Ne8 11. f4 d6 12. exd6?? (12. O-O) 12... Nxd6 13. O-O Bf5 14. Nd4 (14. Rc1 Bxc3 15. bxc3 Na2 16. Ra1 Nxc3 17. Qd2 Rc8 18. Bf3 Be4 19. Bd4 Nd5 20. Rae1 Bxf3 21. Rxf3 Nf5 22. Bf2)) 8... d5 9. exd5 (9. Nxc6 bxc6 10. e5 Nd7 11. f4 e6 12. g4 (12. Na4 Qa5 (12... f6 13. exf6 Qxf6 14. c3 e5 15. fxe5 Qxe5 16. Rxf8+ Nxf8 (16... Bxf8 17. Bd4 Qg5 { [%cal Gd7f6] })) 13. c4 Ba6) 12... f6 { less accurate } (12... g5 { better move })) 9... Nb4 (9... Nxd5 10. Nxd5 Qxd5 11. Nxc6 bxc6 12. Bf3 Qb5 (12... Qa5 13. Bxc6 Rb8 14. Rb1 Bf5 15. b4 (15. a3))) 10. d6 (10. Qd2 Nbxd5 11. Nxd5 Nxd5 12. Bh6 Bxh6 13. Qxh6 Qb6 14. Rad1 (14. Nb3 Bf5 15. c3 e5 { [%cal Gf1e1,Gd5f4] }) (14. Nf3 Qxb2 15. Ng5 Qg7)) 10... Qxd6 11. Ndb5 (11. Ncb5 Qb8 12. c4 Nc6 13. Nxc6 (13. Qb3 Ng4 14. Bxg4 Bxg4 15. Nxc6 bxc6 16. Nxa7 Qc7 { [%cal Gf8b8] } 17. Qa4 Rfb8 (17... h6 18. Qa3) 18. Qa3 Rb7) 13... bxc6 14. Nxa7?? (14. Nd4)) 11... Qb8 12. Bc5 Nc6 13. Bf3 a6 14. Bxc6 (14. Na3 Qc7 15. Nc4 Be6 16. Bb6 Qf4 17. Ne3 Qb4) 14... bxc6) (7. Bc4 Qa5 (7... Qb6?? 8. Ne6 (8. Bb3 Nxe4 9. Ne6 Bxc3+ 10. bxc3)) 8. Qd2 (8. f3 Qb4 9. Bb3 Nxe4 10. Nxc6 Bxc3+ 11. bxc3 Qxc3+ 12. Ke2 dxc6 13. fxe4 (13. Qg1 a5 (13... Nf6 14. Bd4 Qb4 (14... Qa5 15. Qe3 O-O (15... c5 16. Bxc5 (16. Bxf6 Qa6+ 17. Kf2 Qxf6 18. Qxc5 b6 19. Qd5 Rb8 (19... O-O { interesting move sacing the rook } 20. Qxa8 Qh4+ 21. Ke3 Qg5+ 22. Kf2 Qd2+ 23. Kg3 Qg5+ 24. Kf2 Qc5+ 25. Kg3 Qc7+ 26. Kf2 Qc5+ 27. Kg3 Qc7+ 28. Kf2 Bb7 29. Qxa7 Ra8 30. Qxa8+ Bxa8)) 16... Be6 17. Bxe6 fxe6 (17... Qa6+ 18. Kf2 fxe6) 18. Bd4 Nd5 19. Qxe6?? (19. Qe4 O-O (19... Rf8 20. Qxe6??) 20. Qxe6+ Rf7)) 16. Qxe7 Nd5 { good line }) 15. Qe3 O-O)) (13. Bd4 e5 14. Bxc3 (14. Qg1) 14... Nxc3+ 15. Kf2 Nxd1+)) (8. Nb3 Qb4 9. Bd3 (9. Bd5 Nxe4 10. Bxe4 Bxc3+ 11. bxc3 Qxe4) 9... Nxe4 10. Bxe4 Bxc3+ 11. bxc3 Qxe4) (8. O-O O-O 9. Bb3 (9. Nb3 Qc7 10. Bg5 (10. f4 d6 11. Be2 b6 12. Bf3 Bb7 13. Nd5 Nxd5 14. exd5 Na5 15. Nxa5 bxa5 16. Bd4 Bxd4+) 10... a6 11. Bxf6 (11. Be2 d6 12. Bxf6 exf6 { [%cal Gc6e7,Gf6f5] }) (11. a4 Nb4) 11... Bxf6 (11... exf6) 12. Nd5 Qe5 13. Nxf6+ Qxf6) 9... d6 10. f3 (10. h3 Bd7 11. Qe2 (11. f4 Nxd4 12. Bxd4 Bc6 13. Qe2 (13. Qd3 Rad8 14. Rae1 (14. f5 Nd7) 14... e5 15. Be3 d5 16. fxe5 Nxe4 17. Qd4) 13... Qb4 14. Rad1 Nxe4 15. Bxg7 Kxg7 16. Nxe4 Bxe4 (16... Qxe4 17. Qd2)) (11. Re1 Rac8 12. Nd5 Rfe8 13. f3 Nxd5 14. exd5 Nxd4 15. Bxd4 Qxe1+ 16. Qxe1 Bxd4+ 17. Kh1 Bxb2 18. Rb1 Bc3)) 10... Bd7 11. Qd2 (11. Kh1) 11... Rfc8 12. Rad1 (12. Nd5?? { khatib said to play Qd8 but it is a bad move missing a big advantage when Qxd2 } 12... Qxd2 13. Bxd2 Nxd5 14. Nxc6 bxc6 15. exd5 Bxb2 16. Rab1 Bd4+ 17. Kh1 cxd5 18. Bxd5 Rab8 19. Rxb8 Rxb8) 12... Ne5 13. Qe2 (13. h3 Nc4 14. Bxc4 Rxc4 15. a3 Rac8 16. Nb3 Qa6 17. Qe2?) 13... Qa6 (13... a6 { khatib move } 14. h3 b5 15. f4 Nc4 16. Bxc4 bxc4 17. Bc1 Rab8 18. e5 Ne8 19. exd6 Nxd6 20. Qxe7 Bxd4+ 21. Rxd4 Nf5 22. Qxd7 Rd8 23. Qxd8+ Rxd8 24. Rxc4)) 8... Nxe4 9. Nxc6 (9. Nxe4 Qxd2+ 10. Bxd2 Nxd4) 9... Qxc3 (9... Bxc3??) 10. Qxc3 Nxc3 (10... Bxc3+ 11. bxc3 dxc6) 11. Nxa7 Na4 12. Nb5) (7. Qd2 O-O 8. O-O-O (8. f3 d5 9. O-O-O dxe4 (9... Nxd4 10. Bxd4 dxe4 11. Nxe4 Nxe4 12. fxe4 Bxd4 13. Qxd4 Qc7 { [%cal Gc8e6,Ga8c8] }) 10. Nxc6)) (7. f3 O-O 8. Bc4 Qb6 9. Bb3 (9. Rb1 Nxe4 (9... Qc5 { better move } 10. Bb3 Nxe4?? (10... Ng4 11. fxg4 Bxd4 12. Bxd4 Nxd4 13. O-O??) 11. Nxe4 Qb6) 10. Nd5 Qa5+ 11. b4 (11. c3 Bxd4 12. Bxd4 Nxd4?? (12... Nd6 13. Bb3 Nf5 14. Bf2 d6) 13. Qxd4 Nf6 (13... Nd6 14. Nxe7#)) 11... Nxb4 12. Nxb4? (12. Bd2)) 9... Nxe4 (9... Ng4 10. fxg4 Bxd4 11. Nd5 Qa5+ 12. Bd2 Qd8) 10. Nd5 (10. fxe4 Bxd4 11. Bxd4 Qxd4 12. Qxd4 Nxd4 13. O-O-O Nc6 14. Nd5 e6?! (14... Rb8 15. Ba4 b5 (15... Re8 { khatib mentioned this move but b5 is better }))) 10... Qa5+ 11. c3 Nf6 12. Nxc6 dxc6 13. Nxe7+ Kh8 14. Nxc8 Raxc8 15. O-O c5 16. c4?!) 7... bxc6 8. e5 Ng8 9. Bd4 (9. Qd2? { Mistake. f4 was best. }) (9. f4 Nh6 10. Qd2 O-O 11. O-O-O d6 12. exd6 (12. h3 Nf5 13. Bf2 c5 14. g4 (14. Nb5 Ba6 { khatib line not the best } 15. g4 Bxb5 16. Bxb5 Nd4 17. Bxd4 cxd4 18. Qxd4 Qa5 19. Bc4 Rab8 (19... dxe5 20. Qd5)) 14... Nd4 (14... Bb7 { ahmed say to play Bb7 but this is weaker than another move Kd4 } 15. gxf5 (15. Rg1 Nd4 16. Bxd4 cxd4 17. Qxd4 dxe5 { this is better for black } 18. Qxd8 Raxd8 19. fxe5) 15... Bxh1) 15. Bxd4 cxd4 16. Qxd4 Bb7 17. Rg1 dxe5 18. Qc5 Qb6 19. Qxb6 axb6 20. f5 e4 21. Rd7 Bc6 22. Rxe7 Bd4 23. Rg2) 12... exd6 (12... Nf5 13. Bf2 Rb8 14. dxe7 Qxe7) (12... Bg4 13. Re1 (13. dxe7?? Qxe7 14. Re1 Rfd8 15. Bd3 (15. Bd4 Qb4 16. Ne2) 15... Rab8 { almost winning to black } 16. Bb6 (16. Bf2 Qb4)) (13. Bc4 Bxd1 14. Rxd1 exd6 15. Qxd6 Qxd6 16. Rxd6) 13... Qxd6 { better } (13... exd6) 14. h3) 13. Qxd6 (13. Bc4 Nf5?! (13... Bg4 14. Qxd6 (14. Rde1 d5 15. Be2 (15. h3 Be6 16. f5 Nxf5 17. Bg5)) 14... Bxd1 15. Qxd8 Raxd8) (13... d5) 14. Bc5 (14. Bb3?) (14. Bf2 c5? { khatib recommended this move but it is slighly inaccurate } 15. Bxc5 Qc7 16. Bd5 (16. Bxd6?? Nxd6) 16... Qxc5 (16... Rb8 17. Ba3 Bb7 18. Rhe1 (18. Bxb7 Qxb7 19. g4 Rfc8 20. gxf5 Bxc3 21. Qxc3 Rxc3 22. bxc3 Qf3)) 17. Bxa8 Nd4 18. Rhe1 Be6 (18... Bf5 19. Be4 Rb8 20. Bxf5 Qb4 21. b3 Nxb3+ 22. axb3 Bxc3 23. Qxd6 Bxe1 24. Qxb4 Bxb4) 19. Re4 Bg4 20. Bd5 Bxd1 21. Kxd1 Nf5 22. Kc1) 14... Qa5 15. Bf2 (15. Bxd6 Nxd6)) (13. Bd4 Bxd4 14. Qxd4 d5 15. Ne4 Nf5 16. Qc3 d4 17. Qc5 (17. Qxc6 Be6)) 13... Qxd6 14. Rxd6 Nf5 15. Rd3 Ba6 16. Bc5 Bxd3 17. Bxf8 Bxf1 18. Bxg7 Bxg2 19. Rg1 Kxg7 20. Rxg2) 9... Qa5 10. e6 (10. f4 Rb8 11. Rb1 (11. Qd2) (11. Bc4) (11. e6 Nf6 12. exf7+ Kxf7 13. Bc4+ d5 14. Bb3 Bg4 15. Qd2 (15. Qd3 Bf5 16. Qd1 Rhd8)) 11... c5 12. Be3 Rxb2 13. Rxb2 (13. Bd2 Rxb1 14. Nxb1)) 10... Nf6 (10... f6?) 11. exd7+ (11. exf7+ Kxf7 12. Bc4+ d5 13. Bb3 e5 (13... Ba6 14. Qd2 e5 15. Be3 (15. Bxe5 Rhe8 { inferior move , best move is to play Rae8 } 16. f4 Bh6 17. Qd4 Ng4 18. O-O-O (18. h3 Nxe5 19. fxe5 Rxe5+ 20. Qxe5 Re8) 18... Rxe5 19. h3 { to be investigated soon })) 14. Bxe5 Re8 15. f4) 11... Bxd7 12. Bc4 Bg4 13. f3 Rd8 14. fxg4 c5 15. Bb5+ Kf8 *	\N	\N	\N	\N	2
4	ToughPGN	1. d4 Nf6 2. c4 c5 3. d5 e6 4. Nc3 (4. dxe6 fxe6 5. Bg5 (5. Nc3 d5 6. cxd5 exd5 7. Bg5 d4 8. Ne4 Be7 9. Nxf6+ Bxf6 10. Bxf6 Qxf6 $15) 5... Be7 6. Nc3 O-O 7. Nf3 Nc6 $11) (4. Nf3 exd5 5. cxd5 d6 6. e4 a6 (6... g6 $11) 7. Bd3 Bg4 8. Nbd2 Nbd7 9. h3 Ne5 10. Be2 Bxf3 11. Nxf3 Nxf3+ 12. Bxf3 Be7 13. O-O Nd7 $11) (4. Bg5 h6 $5 (4... exd5 5. cxd5 d6 $11) 5. Bh4 (5. Bxf6 Qxf6 6. Nc3 d6 7. Nf3 e5 8. e4 Be7 9. Be2 O-O $11) 5... g5 6. Bg3 Qb6 7. Nc3 $5 (7. Be5 Bg7 8. Nc3 d6 9. Bxf6 Bxf6 $11) 7... Qxb2 8. Be5 (8. Rc1 d6 9. e4 exd5 10. cxd5 a6 11. Nf3 Bg4 $13) 8... Ne4 9. Bxh8 (9. Rc1 f6 10. Nf3 Nxf2 11. Kxf2 fxe5 12. Nb5 e4 $36) 9... Nxc3 10. Qc1 Qxc1+ 11. Rxc1 Nxa2 12. Rb1 exd5 13. cxd5 Nb4 $11) 4... exd5 5. cxd5 d6 6. Nf3 (6. e4 g6 7. Be2 (7. Bb5+ Bd7 (7... Nbd7 $11) 8. a4 Bg7 9. Nf3 O-O 10. O-O Bg4 11. h3 Bxf3 12. Qxf3 Nbd7 $11) 7... Bg7 8. Bg5 O-O 9. Qd2 { King's Indian} Re8 10. f3 a6 11. a4 Qa5 $11) 6... g6 7. Nd2 (7. Bg5 h6 (7... Bg7 $11) 8. Bh4 g5 9. Bg3 Nh5 10. e3 Nxg3 11. hxg3 Bg7 12. Bd3 Nd7 13. Qc2 Qe7 $11) 7... Bg7 8. Nc4 O-O 9. Bf4 (9. g3 b6 10. a4 Ba6 11. Nb5 Ne8 12. Bg2 Bxb5 13. axb5 Nd7 14. Bf4 Ne5 $11 (14... Qe7 15. O-O g5 $5 $13)) (9. Bg5 Qe7 10. Qd2 b6 11. Qf4 Rd8 12. O-O-O (12. Ne4 Nbd7 13. Nexd6 h6 14. Bh4 g5 15. Nf5 Qf8 16. Bxg5 hxg5 17. Qxg5 b5 $13) 12... Ba6 13. e4 Bxc4 14. Bxc4 a6 $11) 9... b6 $5 ( 9... Ne8 $11) 10. Bxd6 (10. e3 Ne8 (10... Nh5 $13) 11. Qd2 Ba6 12. a4 f5 $11) 10... Re8 11. e3 (11. Bg3 Nh5 12. e3 Nxg3 13. hxg3 Bxc3+ 14. bxc3 Bb7 15. d6 b5 16. Nb2 Re6 $44) 11... Ne4 12. Nxe4 Rxe4 13. Bg3 b5 14. Nd6 (14. Nd2 Rb4 15. b3 c4 16. Rc1 Qa5 17. bxc4 17. Nd7 $11) 14... Rb4 $44 *	\N	\N	\N	\N	2
7	TestingPGN	1. d4 Nf6 2. c4 g6 3. Nc3 Bg7 4. e4 d6 5. Nf3 O-O 6. Be2 e5 7. O-O Nc6 8. d5 Ne7 9. Nd2 a5 10. a4 Nd7 11. f4 f5 {This aggressive move has been a source of much debate.} (11...exf4 12. Rxf4 Qe8+ 13. Kf2 Nc5 14. Qe2 Bf6 15. Nd2 O-O) 12. Qc2 Kh8 13. Bf4 exf4 14. Rxf4 Nf6 15. Raf1 Qe8 16. Nd4 Rf7 17. R4f3 Ne5 18. Bxe5 Bxe5 19. Nf3 Qh5 20. g4 Qg6 21. h3 Bf6 22. Nd2 Re7 23. c5 dxc5 24. bxc5 Rfe8 25. Qb3 Nd7 26. R1f3 Ne5 27. Rf1 Nf6 28. Qc2 Kg7 29. h4 h5 30. R3f2 Qh6 31. Kg2 Bf5 32. Qe2 Rf7 33. Nc4 Rfe7 34. Nd6+ Kf6 35. Nxe5 Rxe5 36. Rxf5 gxf5 37. Qxf5+ Ke6 38. Qe5+ Kd5 39. Qc7+ Kc4 40. b6 1-0	\N	\N	\N	t	2
\.


--
-- Data for Name: contributions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.contributions (user_, course) FROM stdin;
\.


--
-- Data for Name: courses; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.courses (id, name, language, description, type, duration, contenttype, price, videoavailable, levelnew, levelbeginner, levelmiddle, leveladvanced, author, authorname) FROM stdin;
2	Kings Opening	Arabic	Nice course	Opening	10	  	25	f	t	t	\N	\N	8e47d4c5-0f93-4e6b-ae9c-0741a6fb244b	Mitchell Adel
9			Nice course	\N	\N	\N	\N	\N	\N	\N	\N	\N	4e5dafb6-ddbf-47fa-ae08-2e2e37312f8a	Mitchell Adel
7			Nice course	\N	\N	\N	\N	\N	\N	\N	\N	\N	8e47d4c5-0f93-4e6b-ae9c-0741a6fb244b	Mitchell Adel
6	My First Course		Nice course	\N	\N	\N	\N	\N	\N	\N	\N	\N	8e47d4c5-0f93-4e6b-ae9c-0741a6fb244b	Mitchell Adel
5	My First Course	Arabic	Nice course	\N	\N	\N	\N	\N	\N	\N	\N	\N	8e47d4c5-0f93-4e6b-ae9c-0741a6fb244b	Mitchell Adel
3	My First Course	Arabic	Learn Kings opening from scratch	\N	\N	\N	\N	\N	\N	\N	\N	\N	8e47d4c5-0f93-4e6b-ae9c-0741a6fb244b	Mitchell Adel
\.


--
-- Data for Name: followers; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.followers (follower, following) FROM stdin;
\.


--
-- Data for Name: participations; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.participations (id, finished, chapter, user_) FROM stdin;
68476dfe-f65f-4b33-96fb-378917fbff0a	f	2	68476dfe-f65f-4b33-96fb-378917fbff0a
\.


--
-- Data for Name: profiles; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.profiles (id, username, phonenumber, paymentdetails, userlevel, profilevisibility, coursevisibility) FROM stdin;
\.


--
-- Data for Name: purchases; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.purchases (id, boughtat, user_, course) FROM stdin;
1	2024-02-07 22:55:29	68476dfe-f65f-4b33-96fb-378917fbff0a	2
2	2024-02-08 23:10:36	68476dfe-f65f-4b33-96fb-378917fbff0a	3
\.


--
-- Data for Name: wishes; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.wishes (wisher, wish) FROM stdin;
\.


--
-- Data for Name: buckets; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.buckets (id, name, owner, created_at, updated_at, public, avif_autodetection, file_size_limit, allowed_mime_types, owner_id) FROM stdin;
\.


--
-- Data for Name: migrations; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.migrations (id, name, hash, executed_at) FROM stdin;
0	create-migrations-table	e18db593bcde2aca2a408c4d1100f6abba2195df	2024-01-26 14:02:17.140553
1	initialmigration	6ab16121fbaa08bbd11b712d05f358f9b555d777	2024-01-26 14:02:17.140553
2	storage-schema	5c7968fd083fcea04050c1b7f6253c9771b99011	2024-01-26 14:02:17.140553
3	pathtoken-column	2cb1b0004b817b29d5b0a971af16bafeede4b70d	2024-01-26 14:02:17.140553
4	add-migrations-rls	427c5b63fe1c5937495d9c635c263ee7a5905058	2024-01-26 14:02:17.140553
5	add-size-functions	79e081a1455b63666c1294a440f8ad4b1e6a7f84	2024-01-26 14:02:17.140553
6	change-column-name-in-get-size	f93f62afdf6613ee5e7e815b30d02dc990201044	2024-01-26 14:02:17.140553
7	add-rls-to-buckets	e7e7f86adbc51049f341dfe8d30256c1abca17aa	2024-01-26 14:02:17.140553
8	add-public-to-buckets	fd670db39ed65f9d08b01db09d6202503ca2bab3	2024-01-26 14:02:17.140553
9	fix-search-function	3a0af29f42e35a4d101c259ed955b67e1bee6825	2024-01-26 14:02:17.140553
10	search-files-search-function	68dc14822daad0ffac3746a502234f486182ef6e	2024-01-26 14:02:17.140553
11	add-trigger-to-auto-update-updated_at-column	7425bdb14366d1739fa8a18c83100636d74dcaa2	2024-01-26 14:02:17.140553
12	add-automatic-avif-detection-flag	8e92e1266eb29518b6a4c5313ab8f29dd0d08df9	2024-01-26 14:02:17.140553
13	add-bucket-custom-limits	cce962054138135cd9a8c4bcd531598684b25e7d	2024-01-26 14:02:17.140553
14	use-bytes-for-max-size	941c41b346f9802b411f06f30e972ad4744dad27	2024-01-26 14:02:17.140553
15	add-can-insert-object-function	934146bc38ead475f4ef4b555c524ee5d66799e5	2024-01-26 14:02:17.140553
16	add-version	76debf38d3fd07dcfc747ca49096457d95b1221b	2024-01-26 14:02:17.140553
17	drop-owner-foreign-key	f1cbb288f1b7a4c1eb8c38504b80ae2a0153d101	2024-01-26 14:02:17.140553
18	add_owner_id_column_deprecate_owner	e7a511b379110b08e2f214be852c35414749fe66	2024-01-26 14:02:17.140553
19	alter-default-value-objects-id	02e5e22a78626187e00d173dc45f58fa66a4f043	2024-01-26 14:02:17.237814
\.


--
-- Data for Name: objects; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.objects (id, bucket_id, name, owner, created_at, updated_at, last_accessed_at, metadata, version, owner_id) FROM stdin;
\.


--
-- Data for Name: secrets; Type: TABLE DATA; Schema: vault; Owner: supabase_admin
--

COPY vault.secrets (id, name, description, secret, key_id, nonce, created_at, updated_at) FROM stdin;
\.


--
-- Name: refresh_tokens_id_seq; Type: SEQUENCE SET; Schema: auth; Owner: supabase_auth_admin
--

SELECT pg_catalog.setval('auth.refresh_tokens_id_seq', 113, true);


--
-- Name: key_key_id_seq; Type: SEQUENCE SET; Schema: pgsodium; Owner: supabase_admin
--

SELECT pg_catalog.setval('pgsodium.key_key_id_seq', 1, false);


--
-- Name: chapters_course_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.chapters_course_seq', 1, false);


--
-- Name: chapters_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.chapters_id_seq', 3, true);


--
-- Name: contributions_course_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.contributions_course_seq', 1, false);


--
-- Name: courses_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.courses_id_seq', 9, true);


--
-- Name: participations_chapter_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.participations_chapter_seq', 1, false);


--
-- Name: purchases_course_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.purchases_course_seq', 1, false);


--
-- Name: purchases_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.purchases_id_seq', 1, true);


--
-- Name: wishes_wish_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.wishes_wish_seq', 1, false);


--
-- Name: mfa_amr_claims amr_id_pk; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT amr_id_pk PRIMARY KEY (id);


--
-- Name: audit_log_entries audit_log_entries_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.audit_log_entries
    ADD CONSTRAINT audit_log_entries_pkey PRIMARY KEY (id);


--
-- Name: flow_state flow_state_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.flow_state
    ADD CONSTRAINT flow_state_pkey PRIMARY KEY (id);


--
-- Name: identities identities_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_pkey PRIMARY KEY (id);


--
-- Name: identities identities_provider_id_provider_unique; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_provider_id_provider_unique UNIQUE (provider_id, provider);


--
-- Name: instances instances_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.instances
    ADD CONSTRAINT instances_pkey PRIMARY KEY (id);


--
-- Name: mfa_amr_claims mfa_amr_claims_session_id_authentication_method_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT mfa_amr_claims_session_id_authentication_method_pkey UNIQUE (session_id, authentication_method);


--
-- Name: mfa_challenges mfa_challenges_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_challenges
    ADD CONSTRAINT mfa_challenges_pkey PRIMARY KEY (id);


--
-- Name: mfa_factors mfa_factors_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_factors
    ADD CONSTRAINT mfa_factors_pkey PRIMARY KEY (id);


--
-- Name: refresh_tokens refresh_tokens_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_pkey PRIMARY KEY (id);


--
-- Name: refresh_tokens refresh_tokens_token_unique; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_token_unique UNIQUE (token);


--
-- Name: saml_providers saml_providers_entity_id_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_entity_id_key UNIQUE (entity_id);


--
-- Name: saml_providers saml_providers_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_pkey PRIMARY KEY (id);


--
-- Name: saml_relay_states saml_relay_states_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_pkey PRIMARY KEY (id);


--
-- Name: schema_migrations schema_migrations_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.schema_migrations
    ADD CONSTRAINT schema_migrations_pkey PRIMARY KEY (version);


--
-- Name: sessions sessions_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sessions
    ADD CONSTRAINT sessions_pkey PRIMARY KEY (id);


--
-- Name: sso_domains sso_domains_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_domains
    ADD CONSTRAINT sso_domains_pkey PRIMARY KEY (id);


--
-- Name: sso_providers sso_providers_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_providers
    ADD CONSTRAINT sso_providers_pkey PRIMARY KEY (id);


--
-- Name: users users_phone_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.users
    ADD CONSTRAINT users_phone_key UNIQUE (phone);


--
-- Name: users users_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: chapters chapters_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.chapters
    ADD CONSTRAINT chapters_pkey PRIMARY KEY (id);


--
-- Name: contributions contributions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.contributions
    ADD CONSTRAINT contributions_pkey PRIMARY KEY (user_, course);


--
-- Name: courses courses_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.courses
    ADD CONSTRAINT courses_pkey PRIMARY KEY (id);


--
-- Name: followers followers_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.followers
    ADD CONSTRAINT followers_pkey PRIMARY KEY (follower, following);


--
-- Name: profiles profiles_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.profiles
    ADD CONSTRAINT profiles_pkey PRIMARY KEY (id);


--
-- Name: purchases purchases_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.purchases
    ADD CONSTRAINT purchases_pkey PRIMARY KEY (id);


--
-- Name: wishes wishes_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.wishes
    ADD CONSTRAINT wishes_pkey PRIMARY KEY (wisher, wish);


--
-- Name: buckets buckets_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.buckets
    ADD CONSTRAINT buckets_pkey PRIMARY KEY (id);


--
-- Name: migrations migrations_name_key; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.migrations
    ADD CONSTRAINT migrations_name_key UNIQUE (name);


--
-- Name: migrations migrations_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.migrations
    ADD CONSTRAINT migrations_pkey PRIMARY KEY (id);


--
-- Name: objects objects_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.objects
    ADD CONSTRAINT objects_pkey PRIMARY KEY (id);


--
-- Name: audit_logs_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX audit_logs_instance_id_idx ON auth.audit_log_entries USING btree (instance_id);


--
-- Name: confirmation_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX confirmation_token_idx ON auth.users USING btree (confirmation_token) WHERE ((confirmation_token)::text !~ '^[0-9 ]*$'::text);


--
-- Name: email_change_token_current_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX email_change_token_current_idx ON auth.users USING btree (email_change_token_current) WHERE ((email_change_token_current)::text !~ '^[0-9 ]*$'::text);


--
-- Name: email_change_token_new_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX email_change_token_new_idx ON auth.users USING btree (email_change_token_new) WHERE ((email_change_token_new)::text !~ '^[0-9 ]*$'::text);


--
-- Name: factor_id_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX factor_id_created_at_idx ON auth.mfa_factors USING btree (user_id, created_at);


--
-- Name: flow_state_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX flow_state_created_at_idx ON auth.flow_state USING btree (created_at DESC);


--
-- Name: identities_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX identities_email_idx ON auth.identities USING btree (email text_pattern_ops);


--
-- Name: INDEX identities_email_idx; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON INDEX auth.identities_email_idx IS 'Auth: Ensures indexed queries on the email column';


--
-- Name: identities_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX identities_user_id_idx ON auth.identities USING btree (user_id);


--
-- Name: idx_auth_code; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX idx_auth_code ON auth.flow_state USING btree (auth_code);


--
-- Name: idx_user_id_auth_method; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX idx_user_id_auth_method ON auth.flow_state USING btree (user_id, authentication_method);


--
-- Name: mfa_challenge_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX mfa_challenge_created_at_idx ON auth.mfa_challenges USING btree (created_at DESC);


--
-- Name: mfa_factors_user_friendly_name_unique; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX mfa_factors_user_friendly_name_unique ON auth.mfa_factors USING btree (friendly_name, user_id) WHERE (TRIM(BOTH FROM friendly_name) <> ''::text);


--
-- Name: mfa_factors_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX mfa_factors_user_id_idx ON auth.mfa_factors USING btree (user_id);


--
-- Name: reauthentication_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX reauthentication_token_idx ON auth.users USING btree (reauthentication_token) WHERE ((reauthentication_token)::text !~ '^[0-9 ]*$'::text);


--
-- Name: recovery_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX recovery_token_idx ON auth.users USING btree (recovery_token) WHERE ((recovery_token)::text !~ '^[0-9 ]*$'::text);


--
-- Name: refresh_tokens_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_instance_id_idx ON auth.refresh_tokens USING btree (instance_id);


--
-- Name: refresh_tokens_instance_id_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_instance_id_user_id_idx ON auth.refresh_tokens USING btree (instance_id, user_id);


--
-- Name: refresh_tokens_parent_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_parent_idx ON auth.refresh_tokens USING btree (parent);


--
-- Name: refresh_tokens_session_id_revoked_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_session_id_revoked_idx ON auth.refresh_tokens USING btree (session_id, revoked);


--
-- Name: refresh_tokens_updated_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_updated_at_idx ON auth.refresh_tokens USING btree (updated_at DESC);


--
-- Name: saml_providers_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_providers_sso_provider_id_idx ON auth.saml_providers USING btree (sso_provider_id);


--
-- Name: saml_relay_states_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_created_at_idx ON auth.saml_relay_states USING btree (created_at DESC);


--
-- Name: saml_relay_states_for_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_for_email_idx ON auth.saml_relay_states USING btree (for_email);


--
-- Name: saml_relay_states_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_sso_provider_id_idx ON auth.saml_relay_states USING btree (sso_provider_id);


--
-- Name: sessions_not_after_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sessions_not_after_idx ON auth.sessions USING btree (not_after DESC);


--
-- Name: sessions_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sessions_user_id_idx ON auth.sessions USING btree (user_id);


--
-- Name: sso_domains_domain_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX sso_domains_domain_idx ON auth.sso_domains USING btree (lower(domain));


--
-- Name: sso_domains_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sso_domains_sso_provider_id_idx ON auth.sso_domains USING btree (sso_provider_id);


--
-- Name: sso_providers_resource_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX sso_providers_resource_id_idx ON auth.sso_providers USING btree (lower(resource_id));


--
-- Name: user_id_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX user_id_created_at_idx ON auth.sessions USING btree (user_id, created_at);


--
-- Name: users_email_partial_key; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX users_email_partial_key ON auth.users USING btree (email) WHERE (is_sso_user = false);


--
-- Name: INDEX users_email_partial_key; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON INDEX auth.users_email_partial_key IS 'Auth: A partial unique index that applies only when is_sso_user is false';


--
-- Name: users_instance_id_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_instance_id_email_idx ON auth.users USING btree (instance_id, lower((email)::text));


--
-- Name: users_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_instance_id_idx ON auth.users USING btree (instance_id);


--
-- Name: users_is_anonymous_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_is_anonymous_idx ON auth.users USING btree (is_anonymous);


--
-- Name: bname; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE UNIQUE INDEX bname ON storage.buckets USING btree (name);


--
-- Name: bucketid_objname; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE UNIQUE INDEX bucketid_objname ON storage.objects USING btree (bucket_id, name);


--
-- Name: name_prefix_search; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX name_prefix_search ON storage.objects USING btree (name text_pattern_ops);


--
-- Name: objects update_objects_updated_at; Type: TRIGGER; Schema: storage; Owner: supabase_storage_admin
--

CREATE TRIGGER update_objects_updated_at BEFORE UPDATE ON storage.objects FOR EACH ROW EXECUTE FUNCTION storage.update_updated_at_column();


--
-- Name: identities identities_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: mfa_amr_claims mfa_amr_claims_session_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT mfa_amr_claims_session_id_fkey FOREIGN KEY (session_id) REFERENCES auth.sessions(id) ON DELETE CASCADE;


--
-- Name: mfa_challenges mfa_challenges_auth_factor_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_challenges
    ADD CONSTRAINT mfa_challenges_auth_factor_id_fkey FOREIGN KEY (factor_id) REFERENCES auth.mfa_factors(id) ON DELETE CASCADE;


--
-- Name: mfa_factors mfa_factors_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_factors
    ADD CONSTRAINT mfa_factors_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: refresh_tokens refresh_tokens_session_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_session_id_fkey FOREIGN KEY (session_id) REFERENCES auth.sessions(id) ON DELETE CASCADE;


--
-- Name: saml_providers saml_providers_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- Name: saml_relay_states saml_relay_states_flow_state_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_flow_state_id_fkey FOREIGN KEY (flow_state_id) REFERENCES auth.flow_state(id) ON DELETE CASCADE;


--
-- Name: saml_relay_states saml_relay_states_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- Name: sessions sessions_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sessions
    ADD CONSTRAINT sessions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: sso_domains sso_domains_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_domains
    ADD CONSTRAINT sso_domains_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- Name: contributions contributions_course_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.contributions
    ADD CONSTRAINT contributions_course_fkey FOREIGN KEY (course) REFERENCES public.courses(id) ON DELETE CASCADE;


--
-- Name: contributions contributions_user__fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.contributions
    ADD CONSTRAINT contributions_user__fkey FOREIGN KEY (user_) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: chapters fk_chapters_course; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.chapters
    ADD CONSTRAINT fk_chapters_course FOREIGN KEY (course) REFERENCES public.courses(id);


--
-- Name: courses fk_courses_author; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.courses
    ADD CONSTRAINT fk_courses_author FOREIGN KEY (author) REFERENCES auth.users(id);


--
-- Name: participations fk_participations_chapter; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.participations
    ADD CONSTRAINT fk_participations_chapter FOREIGN KEY (chapter) REFERENCES public.chapters(id);


--
-- Name: participations fk_participations_user; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.participations
    ADD CONSTRAINT fk_participations_user FOREIGN KEY (user_) REFERENCES auth.users(id);


--
-- Name: purchases fk_purchases_course; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.purchases
    ADD CONSTRAINT fk_purchases_course FOREIGN KEY (course) REFERENCES public.courses(id);


--
-- Name: purchases fk_purchases_user; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.purchases
    ADD CONSTRAINT fk_purchases_user FOREIGN KEY (user_) REFERENCES auth.users(id);


--
-- Name: followers followers_follower_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.followers
    ADD CONSTRAINT followers_follower_fkey FOREIGN KEY (follower) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: followers followers_following_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.followers
    ADD CONSTRAINT followers_following_fkey FOREIGN KEY (following) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: profiles profiles_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.profiles
    ADD CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: wishes wishes_wish_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.wishes
    ADD CONSTRAINT wishes_wish_fkey FOREIGN KEY (wish) REFERENCES public.courses(id) ON DELETE CASCADE;


--
-- Name: wishes wishes_wisher_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.wishes
    ADD CONSTRAINT wishes_wisher_fkey FOREIGN KEY (wisher) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: objects objects_bucketId_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.objects
    ADD CONSTRAINT "objects_bucketId_fkey" FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- Name: profiles Profiles are viewable by users who created them.; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Profiles are viewable by users who created them." ON public.profiles FOR SELECT USING ((auth.uid() = id));


--
-- Name: courses Users can insert their own profile.; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can insert their own profile." ON public.courses FOR INSERT WITH CHECK ((auth.uid() = author));


--
-- Name: profiles Users can insert their own profile.; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can insert their own profile." ON public.profiles FOR INSERT WITH CHECK ((auth.uid() = id));


--
-- Name: profiles Users can update own profile.; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can update own profile." ON public.profiles FOR UPDATE USING ((auth.uid() = id));


--
-- Name: profiles; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

--
-- Name: buckets; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.buckets ENABLE ROW LEVEL SECURITY;

--
-- Name: migrations; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.migrations ENABLE ROW LEVEL SECURITY;

--
-- Name: objects; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.objects ENABLE ROW LEVEL SECURITY;

--
-- Name: supabase_realtime; Type: PUBLICATION; Schema: -; Owner: postgres
--

CREATE PUBLICATION supabase_realtime WITH (publish = 'insert, update, delete, truncate');


ALTER PUBLICATION supabase_realtime OWNER TO postgres;

--
-- Name: SCHEMA auth; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA auth TO anon;
GRANT USAGE ON SCHEMA auth TO authenticated;
GRANT USAGE ON SCHEMA auth TO service_role;
GRANT ALL ON SCHEMA auth TO supabase_auth_admin;
GRANT ALL ON SCHEMA auth TO dashboard_user;
GRANT ALL ON SCHEMA auth TO postgres;


--
-- Name: SCHEMA extensions; Type: ACL; Schema: -; Owner: postgres
--

GRANT USAGE ON SCHEMA extensions TO anon;
GRANT USAGE ON SCHEMA extensions TO authenticated;
GRANT USAGE ON SCHEMA extensions TO service_role;
GRANT ALL ON SCHEMA extensions TO dashboard_user;


--
-- Name: SCHEMA public; Type: ACL; Schema: -; Owner: pg_database_owner
--

GRANT USAGE ON SCHEMA public TO postgres;
GRANT USAGE ON SCHEMA public TO anon;
GRANT USAGE ON SCHEMA public TO authenticated;
GRANT USAGE ON SCHEMA public TO service_role;


--
-- Name: SCHEMA realtime; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA realtime TO postgres;


--
-- Name: SCHEMA storage; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT ALL ON SCHEMA storage TO postgres;
GRANT USAGE ON SCHEMA storage TO anon;
GRANT USAGE ON SCHEMA storage TO authenticated;
GRANT USAGE ON SCHEMA storage TO service_role;
GRANT ALL ON SCHEMA storage TO supabase_storage_admin;
GRANT ALL ON SCHEMA storage TO dashboard_user;


--
-- Name: FUNCTION email(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.email() TO dashboard_user;
GRANT ALL ON FUNCTION auth.email() TO postgres;


--
-- Name: FUNCTION jwt(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.jwt() TO postgres;
GRANT ALL ON FUNCTION auth.jwt() TO dashboard_user;


--
-- Name: FUNCTION role(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.role() TO dashboard_user;
GRANT ALL ON FUNCTION auth.role() TO postgres;


--
-- Name: FUNCTION uid(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.uid() TO dashboard_user;
GRANT ALL ON FUNCTION auth.uid() TO postgres;


--
-- Name: FUNCTION algorithm_sign(signables text, secret text, algorithm text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.algorithm_sign(signables text, secret text, algorithm text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.algorithm_sign(signables text, secret text, algorithm text) TO dashboard_user;


--
-- Name: FUNCTION armor(bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.armor(bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.armor(bytea) TO dashboard_user;


--
-- Name: FUNCTION armor(bytea, text[], text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.armor(bytea, text[], text[]) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.armor(bytea, text[], text[]) TO dashboard_user;


--
-- Name: FUNCTION crypt(text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.crypt(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.crypt(text, text) TO dashboard_user;


--
-- Name: FUNCTION dearmor(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.dearmor(text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.dearmor(text) TO dashboard_user;


--
-- Name: FUNCTION decrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.decrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.decrypt(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION decrypt_iv(bytea, bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.decrypt_iv(bytea, bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.decrypt_iv(bytea, bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION digest(bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.digest(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.digest(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION digest(text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.digest(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.digest(text, text) TO dashboard_user;


--
-- Name: FUNCTION encrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.encrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.encrypt(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION encrypt_iv(bytea, bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.encrypt_iv(bytea, bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.encrypt_iv(bytea, bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION gen_random_bytes(integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.gen_random_bytes(integer) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_random_bytes(integer) TO dashboard_user;


--
-- Name: FUNCTION gen_random_uuid(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.gen_random_uuid() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_random_uuid() TO dashboard_user;


--
-- Name: FUNCTION gen_salt(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.gen_salt(text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_salt(text) TO dashboard_user;


--
-- Name: FUNCTION gen_salt(text, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.gen_salt(text, integer) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_salt(text, integer) TO dashboard_user;


--
-- Name: FUNCTION grant_pg_cron_access(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.grant_pg_cron_access() FROM postgres;
GRANT ALL ON FUNCTION extensions.grant_pg_cron_access() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.grant_pg_cron_access() TO dashboard_user;


--
-- Name: FUNCTION grant_pg_graphql_access(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.grant_pg_graphql_access() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION grant_pg_net_access(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.grant_pg_net_access() FROM postgres;
GRANT ALL ON FUNCTION extensions.grant_pg_net_access() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.grant_pg_net_access() TO dashboard_user;


--
-- Name: FUNCTION hmac(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.hmac(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.hmac(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION hmac(text, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.hmac(text, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.hmac(text, text, text) TO dashboard_user;


--
-- Name: FUNCTION pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision) TO dashboard_user;


--
-- Name: FUNCTION pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone) TO dashboard_user;


--
-- Name: FUNCTION pg_stat_statements_reset(userid oid, dbid oid, queryid bigint); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pg_stat_statements_reset(userid oid, dbid oid, queryid bigint) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_reset(userid oid, dbid oid, queryid bigint) TO dashboard_user;


--
-- Name: FUNCTION pgp_armor_headers(text, OUT key text, OUT value text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_armor_headers(text, OUT key text, OUT value text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_armor_headers(text, OUT key text, OUT value text) TO dashboard_user;


--
-- Name: FUNCTION pgp_key_id(bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_key_id(bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_key_id(bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt(text, bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt(text, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt_bytea(bytea, bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt_bytea(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt(bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt(bytea, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt_bytea(bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt_bytea(bytea, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt(text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt(text, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt_bytea(bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt_bytea(bytea, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgrst_ddl_watch(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgrst_ddl_watch() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pgrst_drop_watch(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgrst_drop_watch() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION set_graphql_placeholder(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.set_graphql_placeholder() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION sign(payload json, secret text, algorithm text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.sign(payload json, secret text, algorithm text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.sign(payload json, secret text, algorithm text) TO dashboard_user;


--
-- Name: FUNCTION try_cast_double(inp text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.try_cast_double(inp text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.try_cast_double(inp text) TO dashboard_user;


--
-- Name: FUNCTION url_decode(data text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.url_decode(data text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.url_decode(data text) TO dashboard_user;


--
-- Name: FUNCTION url_encode(data bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.url_encode(data bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.url_encode(data bytea) TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v1(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_generate_v1() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1() TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v1mc(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_generate_v1mc() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1mc() TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v3(namespace uuid, name text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_generate_v3(namespace uuid, name text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v3(namespace uuid, name text) TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v4(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_generate_v4() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v4() TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v5(namespace uuid, name text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_generate_v5(namespace uuid, name text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v5(namespace uuid, name text) TO dashboard_user;


--
-- Name: FUNCTION uuid_nil(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_nil() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_nil() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_dns(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_ns_dns() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_dns() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_oid(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_ns_oid() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_oid() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_url(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_ns_url() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_url() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_x500(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_ns_x500() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_x500() TO dashboard_user;


--
-- Name: FUNCTION verify(token text, secret text, algorithm text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.verify(token text, secret text, algorithm text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.verify(token text, secret text, algorithm text) TO dashboard_user;


--
-- Name: FUNCTION comment_directive(comment_ text); Type: ACL; Schema: graphql; Owner: supabase_admin
--

GRANT ALL ON FUNCTION graphql.comment_directive(comment_ text) TO postgres;
GRANT ALL ON FUNCTION graphql.comment_directive(comment_ text) TO anon;
GRANT ALL ON FUNCTION graphql.comment_directive(comment_ text) TO authenticated;
GRANT ALL ON FUNCTION graphql.comment_directive(comment_ text) TO service_role;


--
-- Name: FUNCTION exception(message text); Type: ACL; Schema: graphql; Owner: supabase_admin
--

GRANT ALL ON FUNCTION graphql.exception(message text) TO postgres;
GRANT ALL ON FUNCTION graphql.exception(message text) TO anon;
GRANT ALL ON FUNCTION graphql.exception(message text) TO authenticated;
GRANT ALL ON FUNCTION graphql.exception(message text) TO service_role;


--
-- Name: FUNCTION get_schema_version(); Type: ACL; Schema: graphql; Owner: supabase_admin
--

GRANT ALL ON FUNCTION graphql.get_schema_version() TO postgres;
GRANT ALL ON FUNCTION graphql.get_schema_version() TO anon;
GRANT ALL ON FUNCTION graphql.get_schema_version() TO authenticated;
GRANT ALL ON FUNCTION graphql.get_schema_version() TO service_role;


--
-- Name: FUNCTION increment_schema_version(); Type: ACL; Schema: graphql; Owner: supabase_admin
--

GRANT ALL ON FUNCTION graphql.increment_schema_version() TO postgres;
GRANT ALL ON FUNCTION graphql.increment_schema_version() TO anon;
GRANT ALL ON FUNCTION graphql.increment_schema_version() TO authenticated;
GRANT ALL ON FUNCTION graphql.increment_schema_version() TO service_role;


--
-- Name: FUNCTION graphql("operationName" text, query text, variables jsonb, extensions jsonb); Type: ACL; Schema: graphql_public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO postgres;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO anon;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO authenticated;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO service_role;


--
-- Name: FUNCTION lo_export(oid, text); Type: ACL; Schema: pg_catalog; Owner: supabase_admin
--

REVOKE ALL ON FUNCTION pg_catalog.lo_export(oid, text) FROM postgres;
GRANT ALL ON FUNCTION pg_catalog.lo_export(oid, text) TO supabase_admin;


--
-- Name: FUNCTION lo_import(text); Type: ACL; Schema: pg_catalog; Owner: supabase_admin
--

REVOKE ALL ON FUNCTION pg_catalog.lo_import(text) FROM postgres;
GRANT ALL ON FUNCTION pg_catalog.lo_import(text) TO supabase_admin;


--
-- Name: FUNCTION lo_import(text, oid); Type: ACL; Schema: pg_catalog; Owner: supabase_admin
--

REVOKE ALL ON FUNCTION pg_catalog.lo_import(text, oid) FROM postgres;
GRANT ALL ON FUNCTION pg_catalog.lo_import(text, oid) TO supabase_admin;


--
-- Name: FUNCTION get_auth(p_usename text); Type: ACL; Schema: pgbouncer; Owner: postgres
--

REVOKE ALL ON FUNCTION pgbouncer.get_auth(p_usename text) FROM PUBLIC;
GRANT ALL ON FUNCTION pgbouncer.get_auth(p_usename text) TO pgbouncer;


--
-- Name: FUNCTION crypto_aead_det_decrypt(message bytea, additional bytea, key_uuid uuid, nonce bytea); Type: ACL; Schema: pgsodium; Owner: pgsodium_keymaker
--

GRANT ALL ON FUNCTION pgsodium.crypto_aead_det_decrypt(message bytea, additional bytea, key_uuid uuid, nonce bytea) TO service_role;


--
-- Name: FUNCTION crypto_aead_det_encrypt(message bytea, additional bytea, key_uuid uuid, nonce bytea); Type: ACL; Schema: pgsodium; Owner: pgsodium_keymaker
--

GRANT ALL ON FUNCTION pgsodium.crypto_aead_det_encrypt(message bytea, additional bytea, key_uuid uuid, nonce bytea) TO service_role;


--
-- Name: FUNCTION crypto_aead_det_keygen(); Type: ACL; Schema: pgsodium; Owner: supabase_admin
--

GRANT ALL ON FUNCTION pgsodium.crypto_aead_det_keygen() TO service_role;


--
-- Name: FUNCTION can_insert_object(bucketid text, name text, owner uuid, metadata jsonb); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.can_insert_object(bucketid text, name text, owner uuid, metadata jsonb) TO postgres;


--
-- Name: FUNCTION extension(name text); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.extension(name text) TO anon;
GRANT ALL ON FUNCTION storage.extension(name text) TO authenticated;
GRANT ALL ON FUNCTION storage.extension(name text) TO service_role;
GRANT ALL ON FUNCTION storage.extension(name text) TO dashboard_user;
GRANT ALL ON FUNCTION storage.extension(name text) TO postgres;


--
-- Name: FUNCTION filename(name text); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.filename(name text) TO anon;
GRANT ALL ON FUNCTION storage.filename(name text) TO authenticated;
GRANT ALL ON FUNCTION storage.filename(name text) TO service_role;
GRANT ALL ON FUNCTION storage.filename(name text) TO dashboard_user;
GRANT ALL ON FUNCTION storage.filename(name text) TO postgres;


--
-- Name: FUNCTION foldername(name text); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.foldername(name text) TO anon;
GRANT ALL ON FUNCTION storage.foldername(name text) TO authenticated;
GRANT ALL ON FUNCTION storage.foldername(name text) TO service_role;
GRANT ALL ON FUNCTION storage.foldername(name text) TO dashboard_user;
GRANT ALL ON FUNCTION storage.foldername(name text) TO postgres;


--
-- Name: FUNCTION get_size_by_bucket(); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.get_size_by_bucket() TO postgres;


--
-- Name: FUNCTION search(prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.search(prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text) TO postgres;


--
-- Name: FUNCTION update_updated_at_column(); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.update_updated_at_column() TO postgres;


--
-- Name: TABLE audit_log_entries; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.audit_log_entries TO dashboard_user;
GRANT ALL ON TABLE auth.audit_log_entries TO postgres;


--
-- Name: TABLE flow_state; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.flow_state TO postgres;
GRANT ALL ON TABLE auth.flow_state TO dashboard_user;


--
-- Name: TABLE identities; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.identities TO postgres;
GRANT ALL ON TABLE auth.identities TO dashboard_user;


--
-- Name: TABLE instances; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.instances TO dashboard_user;
GRANT ALL ON TABLE auth.instances TO postgres;


--
-- Name: TABLE mfa_amr_claims; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.mfa_amr_claims TO postgres;
GRANT ALL ON TABLE auth.mfa_amr_claims TO dashboard_user;


--
-- Name: TABLE mfa_challenges; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.mfa_challenges TO postgres;
GRANT ALL ON TABLE auth.mfa_challenges TO dashboard_user;


--
-- Name: TABLE mfa_factors; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.mfa_factors TO postgres;
GRANT ALL ON TABLE auth.mfa_factors TO dashboard_user;


--
-- Name: TABLE refresh_tokens; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.refresh_tokens TO dashboard_user;
GRANT ALL ON TABLE auth.refresh_tokens TO postgres;


--
-- Name: SEQUENCE refresh_tokens_id_seq; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON SEQUENCE auth.refresh_tokens_id_seq TO dashboard_user;
GRANT ALL ON SEQUENCE auth.refresh_tokens_id_seq TO postgres;


--
-- Name: TABLE saml_providers; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.saml_providers TO postgres;
GRANT ALL ON TABLE auth.saml_providers TO dashboard_user;


--
-- Name: TABLE saml_relay_states; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.saml_relay_states TO postgres;
GRANT ALL ON TABLE auth.saml_relay_states TO dashboard_user;


--
-- Name: TABLE schema_migrations; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.schema_migrations TO dashboard_user;
GRANT ALL ON TABLE auth.schema_migrations TO postgres;


--
-- Name: TABLE sessions; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.sessions TO postgres;
GRANT ALL ON TABLE auth.sessions TO dashboard_user;


--
-- Name: TABLE sso_domains; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.sso_domains TO postgres;
GRANT ALL ON TABLE auth.sso_domains TO dashboard_user;


--
-- Name: TABLE sso_providers; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.sso_providers TO postgres;
GRANT ALL ON TABLE auth.sso_providers TO dashboard_user;


--
-- Name: TABLE users; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.users TO dashboard_user;
GRANT ALL ON TABLE auth.users TO postgres;


--
-- Name: TABLE pg_stat_statements; Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON TABLE extensions.pg_stat_statements TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE extensions.pg_stat_statements TO dashboard_user;


--
-- Name: TABLE pg_stat_statements_info; Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON TABLE extensions.pg_stat_statements_info TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE extensions.pg_stat_statements_info TO dashboard_user;


--
-- Name: SEQUENCE seq_schema_version; Type: ACL; Schema: graphql; Owner: supabase_admin
--

GRANT ALL ON SEQUENCE graphql.seq_schema_version TO postgres;
GRANT ALL ON SEQUENCE graphql.seq_schema_version TO anon;
GRANT ALL ON SEQUENCE graphql.seq_schema_version TO authenticated;
GRANT ALL ON SEQUENCE graphql.seq_schema_version TO service_role;


--
-- Name: TABLE decrypted_key; Type: ACL; Schema: pgsodium; Owner: supabase_admin
--

GRANT ALL ON TABLE pgsodium.decrypted_key TO pgsodium_keyholder;


--
-- Name: TABLE masking_rule; Type: ACL; Schema: pgsodium; Owner: supabase_admin
--

GRANT ALL ON TABLE pgsodium.masking_rule TO pgsodium_keyholder;


--
-- Name: TABLE mask_columns; Type: ACL; Schema: pgsodium; Owner: supabase_admin
--

GRANT ALL ON TABLE pgsodium.mask_columns TO pgsodium_keyholder;


--
-- Name: TABLE chapters; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.chapters TO anon;
GRANT ALL ON TABLE public.chapters TO authenticated;
GRANT ALL ON TABLE public.chapters TO service_role;


--
-- Name: SEQUENCE chapters_course_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.chapters_course_seq TO anon;
GRANT ALL ON SEQUENCE public.chapters_course_seq TO authenticated;
GRANT ALL ON SEQUENCE public.chapters_course_seq TO service_role;


--
-- Name: SEQUENCE chapters_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.chapters_id_seq TO anon;
GRANT ALL ON SEQUENCE public.chapters_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.chapters_id_seq TO service_role;


--
-- Name: TABLE contributions; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.contributions TO anon;
GRANT ALL ON TABLE public.contributions TO authenticated;
GRANT ALL ON TABLE public.contributions TO service_role;


--
-- Name: SEQUENCE contributions_course_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.contributions_course_seq TO anon;
GRANT ALL ON SEQUENCE public.contributions_course_seq TO authenticated;
GRANT ALL ON SEQUENCE public.contributions_course_seq TO service_role;


--
-- Name: TABLE courses; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.courses TO anon;
GRANT ALL ON TABLE public.courses TO authenticated;
GRANT ALL ON TABLE public.courses TO service_role;


--
-- Name: SEQUENCE courses_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.courses_id_seq TO anon;
GRANT ALL ON SEQUENCE public.courses_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.courses_id_seq TO service_role;


--
-- Name: TABLE followers; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.followers TO anon;
GRANT ALL ON TABLE public.followers TO authenticated;
GRANT ALL ON TABLE public.followers TO service_role;


--
-- Name: TABLE participations; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.participations TO anon;
GRANT ALL ON TABLE public.participations TO authenticated;
GRANT ALL ON TABLE public.participations TO service_role;


--
-- Name: SEQUENCE participations_chapter_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.participations_chapter_seq TO anon;
GRANT ALL ON SEQUENCE public.participations_chapter_seq TO authenticated;
GRANT ALL ON SEQUENCE public.participations_chapter_seq TO service_role;


--
-- Name: TABLE profiles; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.profiles TO anon;
GRANT ALL ON TABLE public.profiles TO authenticated;
GRANT ALL ON TABLE public.profiles TO service_role;


--
-- Name: TABLE purchases; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.purchases TO anon;
GRANT ALL ON TABLE public.purchases TO authenticated;
GRANT ALL ON TABLE public.purchases TO service_role;


--
-- Name: SEQUENCE purchases_course_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.purchases_course_seq TO anon;
GRANT ALL ON SEQUENCE public.purchases_course_seq TO authenticated;
GRANT ALL ON SEQUENCE public.purchases_course_seq TO service_role;


--
-- Name: SEQUENCE purchases_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.purchases_id_seq TO anon;
GRANT ALL ON SEQUENCE public.purchases_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.purchases_id_seq TO service_role;


--
-- Name: TABLE wishes; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.wishes TO anon;
GRANT ALL ON TABLE public.wishes TO authenticated;
GRANT ALL ON TABLE public.wishes TO service_role;


--
-- Name: SEQUENCE wishes_wish_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.wishes_wish_seq TO anon;
GRANT ALL ON SEQUENCE public.wishes_wish_seq TO authenticated;
GRANT ALL ON SEQUENCE public.wishes_wish_seq TO service_role;


--
-- Name: TABLE buckets; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.buckets TO anon;
GRANT ALL ON TABLE storage.buckets TO authenticated;
GRANT ALL ON TABLE storage.buckets TO service_role;
GRANT ALL ON TABLE storage.buckets TO postgres;


--
-- Name: TABLE migrations; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.migrations TO anon;
GRANT ALL ON TABLE storage.migrations TO authenticated;
GRANT ALL ON TABLE storage.migrations TO service_role;
GRANT ALL ON TABLE storage.migrations TO postgres;


--
-- Name: TABLE objects; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.objects TO anon;
GRANT ALL ON TABLE storage.objects TO authenticated;
GRANT ALL ON TABLE storage.objects TO service_role;
GRANT ALL ON TABLE storage.objects TO postgres;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON SEQUENCES  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON FUNCTIONS  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON TABLES  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT ALL ON SEQUENCES  TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT ALL ON FUNCTIONS  TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT ALL ON TABLES  TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: pgsodium; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium GRANT ALL ON SEQUENCES  TO pgsodium_keyholder;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: pgsodium; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium GRANT ALL ON TABLES  TO pgsodium_keyholder;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: pgsodium_masks; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium_masks GRANT ALL ON SEQUENCES  TO pgsodium_keyiduser;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: pgsodium_masks; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium_masks GRANT ALL ON FUNCTIONS  TO pgsodium_keyiduser;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: pgsodium_masks; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium_masks GRANT ALL ON TABLES  TO pgsodium_keyiduser;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON SEQUENCES  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON FUNCTIONS  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON TABLES  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO service_role;


--
-- Name: issue_graphql_placeholder; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_graphql_placeholder ON sql_drop
         WHEN TAG IN ('DROP EXTENSION')
   EXECUTE FUNCTION extensions.set_graphql_placeholder();


ALTER EVENT TRIGGER issue_graphql_placeholder OWNER TO supabase_admin;

--
-- Name: issue_pg_cron_access; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_pg_cron_access ON ddl_command_end
         WHEN TAG IN ('CREATE EXTENSION')
   EXECUTE FUNCTION extensions.grant_pg_cron_access();


ALTER EVENT TRIGGER issue_pg_cron_access OWNER TO supabase_admin;

--
-- Name: issue_pg_graphql_access; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_pg_graphql_access ON ddl_command_end
         WHEN TAG IN ('CREATE FUNCTION')
   EXECUTE FUNCTION extensions.grant_pg_graphql_access();


ALTER EVENT TRIGGER issue_pg_graphql_access OWNER TO supabase_admin;

--
-- Name: issue_pg_net_access; Type: EVENT TRIGGER; Schema: -; Owner: postgres
--

CREATE EVENT TRIGGER issue_pg_net_access ON ddl_command_end
         WHEN TAG IN ('CREATE EXTENSION')
   EXECUTE FUNCTION extensions.grant_pg_net_access();


ALTER EVENT TRIGGER issue_pg_net_access OWNER TO postgres;

--
-- Name: pgrst_ddl_watch; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER pgrst_ddl_watch ON ddl_command_end
   EXECUTE FUNCTION extensions.pgrst_ddl_watch();


ALTER EVENT TRIGGER pgrst_ddl_watch OWNER TO supabase_admin;

--
-- Name: pgrst_drop_watch; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER pgrst_drop_watch ON sql_drop
   EXECUTE FUNCTION extensions.pgrst_drop_watch();


ALTER EVENT TRIGGER pgrst_drop_watch OWNER TO supabase_admin;

--
-- PostgreSQL database dump complete
--

--
-- PostgreSQL database cluster dump complete
--

